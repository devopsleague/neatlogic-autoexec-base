<?xml version="1.0" encoding="UTF-8" ?>
<!--
Copyright(c) $today.year NeatLogic Co., Ltd. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.framework.autoexec.dao.mapper.AutoexecJobMapper">
    <select id="getJobIdListByParentId" parameterType="java.lang.Long" resultType="java.lang.Long">
        SELECT id
        FROM autoexec_job
        WHERE parent_id = #{value}
    </select>

    <select id="searchJobId" parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo"
            resultType="java.lang.Long">
        SELECT
        aj.`id`
        FROM
        `autoexec_job` aj
        <if test="(typeIdList != null and typeIdList.size() > 0) or (combopName != null and combopName != '' )">
            LEFT JOIN `autoexec_combop` ac ON aj.`operation_id` = ac.`id`
        </if>
        <if test="invokeIdList != null and invokeIdList.size() > 0">
            JOIN `autoexec_job_invoke` aji ON aj.`id` = aji.`job_id` AND
            aji.`invoke_id` in
            <foreach collection="invokeIdList" open="(" item="invokeId" close=")" separator=",">
                #{invokeId}
            </foreach>
        </if>
        left join autoexec_job ajj on ajj.parent_id = aj.id
        left join`autoexec_combop` acc ON ajj.`operation_id` = acc.`id`
        <where>
            <include refid="searchJobSql"/>
        </where>
        GROUP BY aj.`id`
        <if test="sortOrder != null">
            order by aj.${sortOrder.key} ${sortOrder.type}
        </if>
        <if test="sortOrder == null">
            order by aj.`plan_start_time` desc
        </if>
        limit #{startNum}, #{pageSize}
    </select>

    <resultMap id="jobMap" type="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        <id column="id" property="id"/>
        <result column="parentId" property="parentId"/>
        <result column="name" property="name"/>
        <result column="status" property="status"/>
        <result column="planStartTime" property="planStartTime"/>
        <result column="startTime" property="startTime"/>
        <result column="endTime" property="endTime"/>
        <result column="operationId" property="operationId"/>
        <result column="operationType" property="operationType"/>
        <result column="execUser" property="execUser"/>
        <result column="execUserType" property="execUserType"/>
        <result column="source" property="source"/>
        <result column="roundCount" property="roundCount"/>
        <result column="triggerType" property="triggerType"/>
        <collection property="phaseList" ofType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
            <id column="phaseId" property="id"/>
            <result column="phaseName" property="name"/>
            <result column="lncd" property="lncd"/>
            <result column="lcd" property="lcd"/>
            <result column="phaseStatus" property="status"/>
        </collection>
    </resultMap>

    <select id="searchJob" resultMap="jobMap">
        SELECT
        aj.`id`,
        aj.`parent_id` AS parentId,
        aj.`name`,
        aj.`status`,
        aj.`plan_start_time` as planStartTime,
        aj.`start_time` as startTime,
        aj.`end_time` as endTime,
        aj.`operation_id` as operationId,
        aj.`operation_type` as operationType,
        aj.`exec_user` as execUser,
        aj.`exec_user_type` as execUserType,
        aj.`source`,
        aj.`round_count` as roundCount,
        aj.`trigger_type` as triggerType,
        ajp.id as phaseId,
        ajp.name as phaseName,
        ajp.lcd,
        ajp.lncd,
        ajp.status as phaseStatus
        FROM
        `autoexec_job` aj
        left join `autoexec_job_phase` ajp on aj.id = ajp.job_id
        WHERE aj.`id` in
        <foreach collection="jobIdList" item="jobId" open="(" close=")" separator=",">
            #{jobId}
        </foreach>
        <if test="jobVo.sortOrder != null">
            order by aj.${jobVo.sortOrder.key} ${jobVo.sortOrder.type}
        </if>
        <if test="jobVo.sortOrder == null">
            order by aj.`plan_start_time` desc
        </if>
    </select>

    <select id="searchJobCount" resultType="java.lang.Integer"
            parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT
        count(distinct aj.`id`)
        FROM
        `autoexec_job` aj
        <if test="(typeIdList != null and typeIdList.size() > 0) or (combopName != null and combopName != '') ">
            LEFT JOIN `autoexec_combop` ac ON aj.`operation_id` = ac.`id`
        </if>
        <if test="invokeIdList != null and invokeIdList.size() > 0">
            JOIN `autoexec_job_invoke` aji ON aj.`id` = aji.`job_id` AND
            aji.`invoke_id` in
            <foreach collection="invokeIdList" open="(" item="invokeId" close=")" separator=",">
                #{invokeId}
            </foreach>
        </if>
        left join autoexec_job ajj on ajj.parent_id = aj.id
        left join`autoexec_combop` acc ON ajj.`operation_id` = acc.`id`
        <where>
            <include refid="searchJobSql"/>
        </where>
    </select>

    <select id="searchJobWithCombopView" parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo"
            resultType="neatlogic.framework.autoexec.dto.combop.AutoexecCombopVo">
        SELECT ac.`name`, COUNT(1) as referenceCount
        FROM `autoexec_job` aj
        LEFT JOIN `autoexec_combop` ac ON aj.`operation_id` = ac.`id`
        left join autoexec_job ajj on ajj.parent_id = aj.id
        left join`autoexec_combop` acc ON ajj.`operation_id` = acc.`id`
        <where>
            <include refid="searchJobSql"/>
        </where>
        GROUP BY ac.id
        limit #{startNum}, #{pageSize}
    </select>

    <sql id="searchJobSql">
        <if test="combopName != null and combopName != ''">
            (ac.name like concat('%', #{combopName}, '%')
            or acc.name like concat('%', #{combopName}, '%'))
        </if>
        <if test="excludeIdList != null and excludeIdList.size() > 0">
            AND aj.id not in
            <foreach collection="excludeIdList" item="item" open="(" close=")" separator=",">#{item}</foreach>
        </if>
        <if test="keyword != null and keyword != ''">
            and (aj.name like concat('%', #{keyword}, '%') OR aj.id = #{keyword} OR ajj.name like concat('%',
            #{keyword}, '%'))
        </if>
        <if test="operationId != null">
            and aj.operation_id = #{operationId}
        </if>
        <if test="statusList != null and statusList.size() > 0 ">
            and (aj.`status` in
            <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>
            or ajj.`status` in
            <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>)
        </if>
        <if test="sourceList != null and sourceList.size() > 0 ">
            and (aj.`source` in
            <foreach collection="sourceList" item="source" open="(" close=")" separator=",">
                #{source}
            </foreach>
            or ajj.`source` in
            <foreach collection="sourceList" item="source" open="(" close=")" separator=",">
                #{source}
            </foreach>)
        </if>
        <if test="typeIdList != null and typeIdList.size() > 0 ">
            and (ac.`type_id` in
            <foreach collection="typeIdList" item="typeId" open="(" close=")"
                     separator=",">
                #{typeId}
            </foreach>
            or acc.`type_id` in
            <foreach collection="typeIdList" item="typeId" open="(" close=")"
                     separator=",">
                #{typeId}
            </foreach>)
        </if>
        <if test="execUserList != null and execUserList.size() > 0 ">
            and (aj.`exec_user` in
            <foreach collection="execUserList" item="execUser" open="(" close=")" separator=",">
                #{execUser}
            </foreach>
            or ajj.`exec_user` in
            <foreach collection="execUserList" item="execUser" open="(" close=")" separator=",">
                #{execUser}
            </foreach>)
        </if>
        <if test="hasParent != null">
            <choose>
                <when test="hasParent == true">
                    AND aj.parent_id is not null
                </when>
                <otherwise>
                    AND aj.parent_id is null
                </otherwise>
            </choose>
        </if>
        <if test="idList != null and idList.size() > 0">
            and aj.`id` in
            <foreach collection="idList" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="startTime != null">
            and (aj.start_time &gt;= #{startTime} or ajj.start_time &gt;= #{startTime} )
        </if>
        <if test="endTime != null ">
            and (aj.start_time &lt;= #{endTime} or ajj.start_time &lt;= #{startTime} )
        </if>
    </sql>

    <sql id="searchJobPhaseNodeSql">
        <if test="jobId != null">
            and ajp.`job_id` = #{jobId}
        </if>
        <if test="jobPhaseName != null and jobPhaseName != ''">
            and ajp.`name` = #{jobPhaseName}
        </if>
        <if test="jobPhaseId != null">
            and ajpn.`job_phase_id` = #{jobPhaseId}
        </if>
        <if test="statusList != null and statusList.size() > 0 ">
            and ajpn.`status` in
            <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>
        </if>
        <if test="nodeIdList != null and nodeIdList.size() > 0 ">
            and ajpn.`id` in
            <foreach collection="nodeIdList" item="nodeId" open="(" close=")" separator=",">
                #{nodeId}
            </foreach>
        </if>
        <if test="statusBlackList != null and statusBlackList.size() > 0 ">
            and ajpn.`status` not in
            <foreach collection="statusBlackList" item="statusBlack" open="(" close=")" separator=",">
                #{statusBlack}
            </foreach>
        </if>
        <if test="keyword != null and keyword != ''">
            and (ajpn.`name` like concat('%',#{keyword},'%') or ajpn.`host` like concat('%',#{keyword},'%'))
        </if>
        <if test="runnerMapId != null">
            and arm.id = #{runnerMapId}
        </if>
        <if test="isDelete != null">
            and ajpn.`is_delete` = #{isDelete}
        </if>
        <if test="nodeFrom != null and nodeFrom != ''">
            and ajp.`node_from` = #{nodeFrom}
        </if>
        <if test="userNameFrom != null and userNameFrom != ''">
            and ajp.`user_name_from` = #{userNameFrom}
        </if>
        <if test="protocolFrom != null and protocolFrom != ''">
            and ajp.`protocol_from` = #{protocolFrom}
        </if>
        <if test="nodeFrom != null and nodeFrom != ''">
            and ajp.`node_from` = #{nodeFrom}
        </if>
        <if test="groupSort != null">
            and ajg.`sort` = #{groupSort}
        </if>
    </sql>

    <select id="searchJobPhaseNodeWithResource"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        ajpn.`id`,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        ajpn.`protocol_id` as protocolId,
        ajpn.`resource_id` AS resourceId,
        ajpn.`warn_count` as warnCount,
        ri.`id` AS nodeId,
        ajpn.name AS nodeName,
        ajpn.type AS nodeType,
        ajpn.is_delete as isDelete,
        arm.`runner_id` AS runnerId,
        arm.id as runnerMapId,
        ajpn.`user_name` AS userName,
        ap.`host` as runnerHost,
        ap.`port` as runnerPort,
        ap.`url` AS runnerUrl
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        LEFT JOIN @{DATA_SCHEMA}.`scence_ipobject_id` ri ON ajpn.resource_id = ri.`id`
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ap ON arm.`runner_id` = ap.`id`
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
        order by ajpn.`host`,ajpn.`port`
        limit #{startNum}, #{pageSize}
    </select>

    <select id="searchJobPhaseNode" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        distinct
        ajpn.`id`,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        ajpn.`protocol_id` as protocolId,
        ajpn.`resource_id` AS resourceId,
        ajpn.name AS nodeName,
        ajpn.type AS nodeType,
        ajpn.is_delete as isDelete,
        ajpn.`user_name` AS userName
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
        order by ajpn.`host`,ajpn.`port`
        limit #{startNum}, #{pageSize}
    </select>

    <select id="getJobPhaseNodeRunnerMapIdListByNodeVo" resultType="java.lang.Long">
        SELECT
        distinct
        arm.id
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ap ON arm.`runner_id` = ap.`id`
        <where>
            <if test="isDownloadGroup != null and isDownloadGroup == 1">
                ajp.node_from != "0"
            </if>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
    </select>

    <select id="getJobPhaseNodeIdListByNodeVoAndStartNum"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        ajpn.`id`,
        ajpn.`status`
        FROM
        `autoexec_job_phase_node` ajpn
        JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        where
        ajp.`job_id` = #{nodeVo.jobId}
        <if test="nodeVo.jobPhaseName != null and nodeVo.jobPhaseName != ''">
            and ajp.`name` = #{nodeVo.jobPhaseName}
        </if>
        <if test="nodeVo.isDelete != null">
            and ajpn.`is_delete` = #{nodeVo.isDelete}
        </if>
        <if test="nodeVo.statusList != null and nodeVo.statusList.size() > 0 ">
            and ajpn.`status` in
            <foreach collection="nodeVo.statusList" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>
        </if>
        <if test="nodeVo.statusBlackList != null and nodeVo.statusBlackList.size() > 0 ">
            and ajpn.`status` not in
            <foreach collection="nodeVo.statusBlackList" item="statusBlack" open="(" close=")" separator=",">
                #{statusBlack}
            </foreach>
        </if>
        order by ajpn.`host`,ajpn.`port`
        limit #{startNum}, #{nodeVo.pageSize}
    </select>

    <select id="searchJobPhaseNodeCountWithResource" resultType="java.lang.Integer">
        SELECT
        count(ajpn.`id`)
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp on ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN @{DATA_SCHEMA}.`scence_ipobject_id` ri ON ajpn.resource_id = ri.`id`
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
    </select>

    <select id="searchJobPhaseNodeCount" resultType="java.lang.Integer">
        SELECT
        count(distinct ajpn.`id`)
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp on ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
    </select>

    <select id="getJobPhaseListWithGroupByJobId" parameterType="java.lang.Long"
            resultMap="AutoexecJobPhaseMap">
        SELECT ajp.`id`,
               ajp.`job_id`                    as jobId,
               ajp.`status`,
               ajp.`start_time`                as startTime,
               ajp.`end_time`                  as endTime,
               ajp.`exec_user`                 as execUser,
               ajp.`exec_mode`                 as execMode,
               ajp.`name`                      as name,
               ajp.`group_id`                  as groupId,
               ajp.`execute_policy`            as executePolicy,
               ajp.`sort`,
               ajp.`warn_count`                as warnCount,
               ajp.`round_count`               as roundCount,
               ajg.id                          as groupId,
               ajg.sort                        as groupSort,
               ajg.config,
               ajg.policy                      as groupPolicy,
               ajp.`uuid`,
               ajp.`is_pre_output_update_node` as isPreOutputUpdateNode
        FROM `autoexec_job_phase` ajp
                 left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        where ajp.`job_id` = #{value}
        ORDER BY ajg.`sort`, ajp.`sort`, ajp.`id`
    </select>

    <resultMap id="AutoexecJobPhaseMap" type="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        <id column="id" property="id"/>
        <result column="jobId" property="jobId"/>
        <result column="status" property="status"/>
        <result column="startTime" property="startTime"/>
        <result column="endTime" property="endTime"/>
        <result column="execUser" property="execUser"/>
        <result column="execMode" property="execMode"/>
        <result column="executePolicy" property="executePolicy"/>
        <result column="name" property="name"/>
        <result column="groupId" property="groupId"/>
        <result column="sort" property="sort"/>
        <result column="warnCount" property="warnCount"/>
        <result column="uuid" property="uuid"/>
        <result column="isPreOutputUpdateNode" property="isPreOutputUpdateNode"/>
        <result column="roundCount" property="roundCount"/>
        <result column="nodeFrom" property="nodeFrom"/>
        <result column="protocolFrom" property="protocolFrom"/>
        <result column="userNameFrom" property="userNameFrom"/>
        <collection property="jobGroupVo" ofType="neatlogic.framework.autoexec.dto.job.AutoexecJobGroupVo">
            <result column="groupId" property="id"/>
            <result column="groupSort" property="sort"/>
            <result column="groupPolicy" property="policy"/>
            <result column="config" property="configStr"/>
        </collection>
    </resultMap>

    <select id="getJobPhaseListByJobIdAndPhaseStatus" resultMap="AutoexecJobPhaseMap">
        SELECT ajp.`id`,
        ajp.`job_id` as jobId,
        ajp.`status`,
        ajp.`start_time` as startTime,
        ajp.`end_time` as endTime,
        ajp.`exec_user` as execUser,
        ajp.`exec_mode` as execMode,
        ajp.`name` as name,
        ajp.`sort`,
        ajg.id as groupId,
        ajg.sort as groupSort,
        ajg.config,
        ajg.policy as groupPolicy
        FROM `autoexec_job_phase` ajp
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        where ajp.`job_id` = #{jobId}
        <if test="statusList != null and statusList.size() >0">
            and ajp.`status` in
            <foreach collection="statusList" item="status" separator="," open="(" close=")">
                #{status}
            </foreach>
        </if>
        ORDER BY ajg.sort, ajp.`sort`, ajp.`id` ASC
    </select>

    <select id="getJobPhaseListByJobIdAndNodeStatusList" resultMap="AutoexecJobPhaseMap">
        SELECT ajp.`id`,
        ajp.`job_id` AS jobId,
        ajp.`status`,
        ajp.`start_time` AS startTime,
        ajp.`end_time` AS endTime,
        ajp.`exec_user` AS execUser,
        ajp.`exec_mode` AS execMode,
        ajp.`name` AS NAME,
        ajp.`sort`,
        ajg.id as groupId,
        ajg.sort as groupSort,
        ajg.policy as groupPolicy
        FROM `autoexec_job_phase_node` ajpn
        JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        WHERE ajpn.job_id = #{jobId} AND ajpn.`status` in
        <foreach collection="statusList" open="(" separator="," close=")" item="status">
            #{status}
        </foreach>
        ORDER BY ajg.`sort`,ajp.sort,ajp.`id`
    </select>

    <select id="getJobPhaseNodeStatusCount" parameterType="java.lang.Long"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeStatusCountVo">
        SELECT `job_phase_id` as jobPhaseId, `status`, COUNT(1) AS `count`
        FROM `autoexec_job_phase_node`
        WHERE `job_id` = #{value}
        GROUP BY `job_phase_id`, `status`
    </select>

    <select id="getJobInfo" parameterType="java.lang.Long"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`exec_user_type`  as execUserType,
               aj.`source`,
               aj.`round_count`     as roundCount,
               aj.`param_hash`      as paramHash,
               aj.`config_hash`     as configHash,
               aj.`lncd`,
               aj.`parent_id`       as parentId,
               aj.`trigger_type`    as triggerType,
               aj.`scenario_id`     as scenarioId
        FROM `autoexec_job` aj
        WHERE aj.`id` = #{value}
    </select>

    <select id="checkIsJobUser" resultType="java.lang.Integer">
        select count(1)
        from `autoexec_job`
        where `id` = #{jobId}
        and `exec_user` in
        <foreach collection="userList" item="user" open="(" close=")" separator=",">
            #{user}
        </foreach>
    </select>

    <select id="getFirstJobPhase" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        select id, job_id as jobId, `name`
        from `autoexec_job_phase`
        where job_id = #{value}
        order by `sort` asc
        limit 1
    </select>

    <select id="getJobLockByJobId" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`source`,
               aj.`round_count`     as roundCount,
               aj.`param_hash`      as paramHash,
               aj.`config_hash`     as configHash,
               aj.`trigger_type`    as triggerType
        FROM `autoexec_job` aj
        WHERE aj.`id` = #{value} for
        update
    </select>

    <select id="getJobIdListByStatusAndTriggerTypeWithoutBatch" parameterType="java.lang.String"
            resultType="java.lang.Long">
        SELECT aj.`id`
        FROM `autoexec_job` aj
        WHERE aj.`status` = #{status}
          AND aj.`trigger_type` = #{triggerType}
          and aj.`source` != 'batchdeploy'
    </select>

    <select id="getBatchJobIdListByStatusAndTriggerType" parameterType="java.lang.String" resultType="java.lang.Long">
        SELECT aj.`id`
        FROM `autoexec_job` aj
        WHERE aj.`status` = #{status}
          AND aj.`trigger_type` = #{triggerType}
          and aj.`source` = 'batchdeploy'
    </select>

    <select id="getJobContentLock"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobContentVo">
        SELECT `hash`,
               `content`
        FROM `autoexec_job_content`
        where `hash` = #{value} for
        update
    </select>

    <select id="getJobContent"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobContentVo">
        SELECT `hash`,
               `content`
        FROM `autoexec_job_content`
        where `hash` = #{value}
    </select>

    <select id="getJobPhaseOperationByJobId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT `job_id`       as jobId,
               `job_phase_id` as jobPhaseId,
               `id`,
               `name`,
               `type`,
               `parser`,
               `exec_mode`    as execMode,
               `fail_policy`  as failPolicy,
               `param_hash`   as paramHash
        FROM `autoexec_job_phase_operation`
        where `job_id` = #{value}
    </select>

    <select id="getJobPhaseOperationListWithoutParentByJobIdAndPhaseId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT `job_id`       as jobId,
               `job_phase_id` as jobPhaseId,
               `id`,
               `name`,
               `type`,
               `parser`,
               `exec_mode`    as execMode,
               `sort`,
               `operation_id` as operationId,
               `fail_policy`  as failPolicy,
               version_id     as versionId,
               `param_hash`   as paramHash,
               `profile_id`   as profileId,
               `uuid`,
               `letter`
        FROM `autoexec_job_phase_operation`
        where `job_id` = #{jobId}
          and `job_phase_id` = #{phaseId}
          and `parent_operation_id` is null
        order by `sort` asc
    </select>

    <select id="getJobPhaseOperationListWithParentByJobIdAndPhaseId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT `job_id`                as jobId,
               `job_phase_id`          as jobPhaseId,
               `id`,
               `name`,
               `type`,
               `parser`,
               `exec_mode`             as execMode,
               `sort`,
               `fail_policy`           as failPolicy,
               version_id              as versionId,
               `param_hash`            as paramHash,
               `profile_id`            as profileId,
               `parent_operation_id`   as parentOperationId,
               `parent_operation_type` as parentOperationType,
               `uuid`,
               `letter`
        FROM `autoexec_job_phase_operation`
        where `job_id` = #{jobId}
          and `job_phase_id` = #{phaseId}
          and `parent_operation_id` is not null
        order by `sort` asc
    </select>

    <select id="getJobPhaseOperationByJobIdAndPhaseUuidAndUuid"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT ajpn.`job_id`       as jobId,
               ajpn.`job_phase_id` as jobPhaseId,
               ajpn.`id`,
               ajpn.`name`,
               ajpn.`type`,
               ajpn.`parser`,
               ajpn.`exec_mode`    as execMode,
               ajpn.`sort`,
               ajpn.`fail_policy`  as failPolicy,
               ajpn.version_id     as versionId,
               ajpn.`param_hash`   as paramHash,
               ajpn.`profile_id`   as profileId
        FROM `autoexec_job_phase_operation` ajpn
                 left join `autoexec_job_phase` ajp on ajpn.job_id = ajp.job_id and ajpn.job_phase_id = ajp.id
        where ajpn.`job_id` = #{jobId}
          and ajp.`uuid` = #{phaseUuid}
          and ajpn.`uuid` = #{uuid}
          and `parent_operation_id` is null
    </select>

    <select id="checkIsJobParamReference" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `autoexec_job` aj
        WHERE aj.id != #{jobId}
          AND aj.`param_hash` = #{hash}
    </select>

    <select id="checkIsJobPhaseOperationParamReference" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `autoexec_job_phase_operation`
        WHERE job_id != #{jobId}
          AND `param_hash` = #{hash}
    </select>

    <select id="checkIsJobPhaseNodeExist" parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo"
            resultType="java.lang.Integer">
        select count(1)
        from `autoexec_job_phase_node`
        where `job_id` = #{jobId}
          and `job_phase_id` = #{jobPhaseId}
          and `host` = #{host}
          and port = #{port}
    </select>

    <select id="getJobPhaseByJobIdAndPhaseName"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT id,
               `name`,
               job_id                      as jobId,
               exec_mode                   as execMode,
               `group_id`                  as groupId,
               `sort`,
               `status`,
               `uuid`,
               `node_from`                 as nodeFrom,
               `user_name_from`            as userNameFrom,
               `protocol_from`             as protocolFrom,
               `is_pre_output_update_node` as isPreOutputUpdateNode,
               `round_count`               as roundCount
        FROM `autoexec_job_phase`
        WHERE `job_id` = #{jobId}
          and `name` = #{jobPhaseName}
    </select>

    <select id="getJobPhaseByJobIdAndPhaseNameWithGroup" resultMap="AutoexecJobPhaseMap">
        SELECT ajp.`id`,
               ajp.`job_id`                    as jobId,
               ajp.`status`,
               ajp.`start_time`                as startTime,
               ajp.`end_time`                  as endTime,
               ajp.`exec_user`                 as execUser,
               ajp.`exec_mode`                 as execMode,
               ajp.`name`                      as name,
               ajp.`sort`,
               ajp.`uuid`,
               ajg.id                          as groupId,
               ajg.sort                        as groupSort,
               ajg.config,
               ajg.policy                      as groupPolicy,
               ajp.`is_pre_output_update_node` as isPreOutputUpdateNode
        FROM `autoexec_job_phase` ajp
                 left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        WHERE ajp.`job_id` = #{jobId}
          and ajp.`name` = #{jobPhaseName}
    </select>

    <select id="getJobPhaseOperationByJobIdAndPhaseIdAndOperationId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT `job_id`       as jobId,
               `job_phase_id` as jobPhaseId,
               `id`,
               `name`,
               `type`,
               `parser`,
               `exec_mode`    as execMode,
               `fail_policy`  as failPolicy,
               `param_hash`   as paramHash
        FROM `autoexec_job_phase_operation`
        where `job_id` = #{jobId}
          and `job_phase_id` = #{jobPhaseId}
          and `id` = #{jobPhaseOperationId}
    </select>

    <select id="getJobPhaseOperationByJobIdAndPhaseId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT `job_id`       as jobId,
               `job_phase_id` as jobPhaseId,
               `id`,
               `name`,
               `type`,
               `parser`,
               `operation_id` as operationId,
               `version_id`   as versionId,
               `exec_mode`    as execMode,
               `letter`,
               `fail_policy`  as failPolicy,
               `param_hash`   as paramHash
        FROM `autoexec_job_phase_operation`
        where `job_id` = #{jobId}
          and `job_phase_id` = #{jobPhaseId}
        order by `sort` asc
    </select>

    <select id="getJobPhaseOperationByOperationId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT `job_id`       as jobId,
               `job_phase_id` as jobPhaseId,
               `id`,
               `name`,
               `type`,
               `parser`,
               `operation_id` as operationId,
               `exec_mode`    as execMode,
               `fail_policy`  as failPolicy,
               `param_hash`   as paramHash,
               `version_id`   as versionId
        FROM `autoexec_job_phase_operation`
        where `id` = #{jobPhaseOperationId}
    </select>

    <select id="getJobPhaseNotCompletedCountByJobIdAndGroupSort" resultType="java.lang.Integer">
        select count(1)
        from `autoexec_job_phase` ajp
                 left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        where ajp.`job_id` = #{jobId}
          and ajg.`sort` = #{groupSort}
          and `status` != 'completed'
    </select>

    <select id="getNextJobPhaseSortByJobId" resultType="java.lang.Integer">
        SELECT sort
        FROM `autoexec_job_phase`
        WHERE job_id = #{jobId}
          AND `sort` > #{sort}
          and `status` in ('pending', 'running')
        ORDER BY `sort` ASC
        LIMIT 1
    </select>

    <select id="checkIsHasActivePhaseFailed" resultType="java.lang.Integer">
        select count(1)
        from `autoexec_job_phase`
        where `job_id` = #{value}
          AND `status` = 'failed'
    </select>
    <select id="getJobPhaseListByJobIdAndGroupSort"
            resultMap="AutoexecJobPhaseMap">
        select
        ajp.`job_id` as jobId,
        ajp.`name`,
        ajp.`exec_mode` as execMode,
        ajp.`id`, ajp.`status`,
        ajp.`execute_policy` as executePolicy,
        ajp.`status`,
        ajp.`round_count` as roundCount,
        ajp.`node_from` as nodeFrom,
        ajp.`user_name_from` as userNameFrom,
        ajp.`protocol_from` as protocolFrom,
        ajg.id as groupId,
        ajg.sort as groupSort,
        ajg.config,
        ajg.policy as groupPolicy
        from `autoexec_job_phase` ajp
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        where ajp.`job_id` = #{jobId}
        <if test="sort != null">
            and ajg.`sort` = #{sort}
        </if>
    </select>
    <select id="getJobPhaseNodeInfoByJobNodeId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
               ajpn.`job_id`       AS jobId,
               ajpn.`job_phase_id` AS jobPhaseId,
               ajpn.`host`,
               ajpn.port,
               ajpn.`start_time`   AS startTime,
               ajpn.`end_time`     AS endTime,
               ajpn.`status`,
               ajp.`name`          AS jobPhaseName,
               ajpn.`name`         AS nodeName,
               ajpn.`user_name`    as userName,
               ajpn.`protocol_id`  AS protocolId,
               ajpn.`resource_id`  as resourceId,
               ap.`id`             AS runnerId,
               ap.`url`            AS runnerUrl
        FROM `autoexec_job_phase_node` ajpn
                 LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
                 LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
                 LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
                 LEFT JOIN `runner` ap ON arm.`runner_id` = ap.`id`
        where ajpn.`id` = #{nodeId}
    </select>

    <select id="getJobPhaseRunnerNodeByJobIdAndPhaseId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
               ajpn.`job_id`       as jobId,
               ajpn.`job_phase_id` as jobPhaseId,
               ajpn.`host`,
               ajpn.`port`,
               ajpn.`user_name`    as userName,
               ajpn.`start_time`   as startTime,
               ajpn.`end_time`     as endTime,
               ajpn.`status`,
               arm.`runner_id`     as runnerId
        FROM `autoexec_job_phase_node` ajpn
                 LEFT JOIN `autoexec_job_phase_node_runner` ajpnr on ajpn.id = ajpnr.`node_id`
                 LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        WHERE ajpn.`job_id` = #{jobId}
          AND ajpn.`job_phase_id` = #{phaseId}
    </select>
    <select id="getJobPhaseByJobIdAndPhaseId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT id,
               job_id      as jobId,
               `name`,
               `exec_mode` as execMode,
               `sort`,
               `status`
        FROM `autoexec_job_phase`
        WHERE `job_id` = #{jobId}
          and `id` = #{jobPhaseId}
    </select>
    <select id="getJobPhaseNodeListByJobIdAndPhaseNameAndExceptStatusAndRunnerId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        arm.`runner_id` AS runnerId,
        ajp.`name` AS jobPhaseName
        FROM `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        where ajpn.`job_id` = #{jobId} and ajp.`name` = #{phaseName} and arm.`runner_id` = #{runnerId} and
        ajpn.`status` not in
        <foreach collection="exceptStatus" item="status" separator="," open="(" close=")">
            #{status}
        </foreach>
    </select>

    <select id="getJobPhaseNodeListByJobIdAndPhaseIdAndExceptStatus"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_id` = #{jobId} and ajpn.`job_phase_id` = #{phaseId} and
        ajpn.`status` not in
        <foreach collection="exceptStatus" item="status" separator="," open="(" close=")">
            #{status}
        </foreach>
    </select>

    <select id="getJobPhaseNodeListByJobIdAndPhaseIdAndExceptStatusAndRunnerMapId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        left join autoexec_job_phase_node_runner ajpnr on ajpn.id = ajpnr.node_id
        where ajpn.`job_id` = #{jobId} and ajpn.`job_phase_id` = #{phaseId}
        and ajpnr.runner_map_id = #{runnerMapId}
        and
        ajpn.`status` not in
        <foreach collection="exceptStatus" item="status" separator="," open="(" close=")">
            #{status}
        </foreach>
        and ajpn.`is_delete` = 0
    </select>

    <select id="getJobPhaseNodeListByJobIdAndPhaseId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
               ajpn.`job_id`       AS jobId,
               ajpn.`job_phase_id` AS jobPhaseId,
               ajpn.`host`,
               ajpn.`port`,
               ajpn.`start_time`   AS startTime,
               ajpn.`end_time`     AS endTime,
               ajpn.`resource_id`  as resourceId,
               ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_id` = #{jobId}
          and ajpn.`job_phase_id` = #{phaseId}
    </select>

    <select id="getJobPhaseNodeListWithRunnerByJobId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
               ajpn.`job_id`       AS jobId,
               ajpn.`job_phase_id` AS jobPhaseId,
               ajpn.`host`,
               ajpn.`port`,
               ajpn.`start_time`   AS startTime,
               ajpn.`end_time`     AS endTime,
               ajpn.`status`,
               ajpn.`resource_id` as resourceId,
               ajpnr.runner_map_id as runnerMapId
        FROM `autoexec_job_phase_node` ajpn
                 left join autoexec_job_phase_node_runner ajpnr on ajpn.id = ajpnr.node_id
        where ajpn.`job_id` = #{jobId}
    </select>

    <select id="getJobPhaseNodeListWithoutDeleteByJobIdAndPhaseId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
               ajpn.`job_id`       AS jobId,
               ajpn.`job_phase_id` AS jobPhaseId,
               ajpn.`host`,
               ajpn.`port`,
               ajpn.`start_time`   AS startTime,
               ajpn.`end_time`     AS endTime,
               ajpn.`resource_id`  as resourceId,
               ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_id` = #{jobId}
          and ajpn.`job_phase_id` = #{phaseId}
          and ajpn.`is_delete` = 0
    </select>

    <select id="getJobRunnerListByJobId" resultType="neatlogic.framework.dto.runner.RunnerVo">
        SELECT DISTINCT ar.`id`, ar.`name`, ar.`url`, ar.`host`, ar.`port`
        FROM `autoexec_job_phase_node` ajpn
                 LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
                 LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
                 LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpn.`job_id` = #{value}
    </select>

    <select id="getJobPhaseRunnerMapByJobIdAndPhaseIdList" resultType="neatlogic.framework.dto.runner.RunnerMapVo">
        SELECT DISTINCT ar.`id`,
        ar.`name`,
        ar.`url`,
        ar.`host`,
        ar.`port`,
        ajpr.runner_map_id as runnerMapId
        FROM `autoexec_job_phase_runner` ajpr
        LEFT JOIN `runner_map` arm ON ajpr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpr.`job_id` = #{jobId}
        <if test="jobPhaseIdList != null and jobPhaseIdList.size() > 0">
            and ajpr.`job_phase_id` in
            <foreach collection="jobPhaseIdList" item="jobPhaseId" close=")" open="(" separator=",">
                #{jobPhaseId}
            </foreach>
        </if>
    </select>
    <select id="checkIsHasRunningNode" resultType="java.lang.Integer">
        select count(1)
        from `autoexec_job_phase_node`
        WHERE `job_id` = #{value}
          and `status` = 'running'
    </select>
    <select id="getJobContentList"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobContentVo">
        SELECT `hash`,
        `content`
        FROM `autoexec_job_content`
        where `hash` in
        <foreach collection="hashList" separator="," open="(" close=")" item="hash">
            #{hash}
        </foreach>
    </select>

    <select id="getJobPhaseRunnerCountByPhaseIdListAndRunnerNotStatus" resultType="java.lang.Integer">
        SELECT
        COUNT(1)
        FROM
        `autoexec_job_phase_runner`
        WHERE `job_phase_id` in
        <foreach collection="jobPhaseIdList" separator="," open="(" close=")" item="jobPhaseId">
            #{jobPhaseId}
        </foreach>
        and `status` != #{status}
    </select>
    <select id="getJobPhaseRunnerCountByJobIdAndRunnerStatus" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `autoexec_job_phase_runner`
        WHERE `job_id` = #{jobId}
          and `status` = #{status}
    </select>
    <select id="getJobPhaseByJobIdAndRunnerStatus"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT ajpr.job_phase_id,
               COUNT(1) as `count`
        FROM `autoexec_job_phase_runner` ajpr
                 LEFT JOIN `autoexec_job_phase` ajp ON ajpr.`job_phase_id` = ajp.`id`
        WHERE ajp.`job_id` = #{jobId}
          AND ajpr.`status` = #{status}
        GROUP BY ajpr.job_phase_id
    </select>
    <select id="getJobPhaseRunnerByPhaseListAndStatusCount" resultType="java.lang.Integer">
        SELECT
        COUNT(1)
        FROM
        `autoexec_job_phase_runner`
        WHERE `job_phase_id` in
        <foreach collection="jobPhaseIdList" separator="," open="(" close=")" item="jobPhaseId">
            #{jobPhaseId}
        </foreach>
        and `status` = #{status}
    </select>
    <select id="getJobPhaseByJobIdAndPhaseStatus"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT `id`,
               `job_id`     as jobId,
               `status`,
               `start_time` as startTime,
               `end_time`   as endTime,
               `exec_user`  as execUser,
               `exec_mode`  as execMode,
               `name`       as name,
               `sort`,
        FROM `autoexec_job_phase`
        where `job_id` = #{jobId}
          and `status` = #{status}
        order by `sort`, `name` asc
        limit 1
    </select>
    <select id="getJobActivePhase" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT `name`
        FROM `autoexec_job_phase`
        WHERE job_id = #{value}
        ORDER BY CASE
                     WHEN `status` = 'running' THEN 1
                     WHEN `status` = 'failed' THEN 2
                     ELSE 3 END ASC,
                 sort ASC, id ASC
        LIMIT 1
    </select>
    <select id="getJobPhaseNodeListByNodeIdList"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`resource_id` AS resourceId,
        ajpn.`user_name` as userName,
        ajpn.`name` as nodeName,
        ajpn.`type` as nodeType,
        ajpn.`protocol_id` as protocolId,
        ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`id` in
        <foreach collection="nodeIdList" item="nodeId" separator="," open="(" close=")">
            #{nodeId}
        </foreach>
    </select>

    <select id="getJobPhaseNodeListByJobPhaseIdAndResourceIdList"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`resource_id` AS resourceId,
        ajpn.`user_name` as userName,
        ajpn.`name` as nodeName,
        ajpn.`type` as nodeType,
        ajpn.`protocol_id` as protocolId,
        ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_phase_id` = #{jobPhaseId} and ajpn.`resource_id` in
        <foreach collection="resourceIdList" item="resourceId" separator="," open="(" close=")">
            #{resourceId}
        </foreach>
    </select>

    <select id="getJobPhaseNodeListByJobPhaseIdAndResourceIdListAndIsDelete"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`resource_id` AS resourceId,
        ajpn.`user_name` as userName,
        ajpn.`name` as nodeName,
        ajpn.`type` as nodeType,
        ajpn.`protocol_id` as protocolId,
        ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_phase_id` = #{jobPhaseId} and ajpn.`resource_id` in
        <foreach collection="resourceIdList" item="resourceId" separator="," open="(" close=")">
            #{resourceId}
        </foreach>
        and ajpn.is_delete = 1
    </select>

    <select id="getJobPhaseNodeRunnerListByNodeIdList"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`resource_id` AS resourceId,
        ajpn.`user_name` as userName,
        ajpn.`name` as nodeName,
        ajpn.`type` as nodeType,
        ajpn.`protocol_id` as protocolId,
        ajpn.`status`,
        ajpnr.runner_map_id as runnerMapId,
        r.url as runnerUrl
        FROM `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpnr.`node_id` = ajpn.`id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` r on arm.runner_id = r.id
        where ajpn.`id` in
        <foreach collection="nodeIdList" item="nodeId" separator="," open="(" close=")">
            #{nodeId}
        </foreach>
    </select>

    <select id="getJobPhaseNodeListWithRunnerByJobPhaseIdAndExceptStatusList"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`resource_id` AS resourceId,
        ajpn.`user_name` as userName,
        ajpn.`name` as nodeName,
        ajpn.`type` as nodeType,
        ajpn.`protocol_id` as protocolId,
        ajpn.`status`,
        ajpnr.runner_map_id as runnerMapId,
        r.url as runnerUrl
        FROM `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpnr.`node_id` = ajpn.`id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` r on arm.runner_id = r.id
        where ajpn.`job_phase_id` = #{jobPhaseId} and ajpn.`is_delete` = 0 and ajpn.`status` not in
        <foreach collection="statusList" item="status" separator="," open="(" close=")">
            #{status}
        </foreach>
    </select>

    <select id="getJobRunnerById" resultType="neatlogic.framework.dto.runner.RunnerVo">
        SELECT ar.`id`, ar.`name`, ar.`url`, ar.`host`, ar.`port`
        FROM `runner` ar
        WHERE ar.`id` = #{value}
    </select>
    <select id="getJobPhaseNodeListByJobIdAndNodeStatusList"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_id` = #{jobId} and ajpn.`status` in
        <foreach collection="statusList" item="status" separator="," open="(" close=")">
            #{status}
        </foreach>
    </select>
    <select id="getJobPhaseByPhaseId" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT id,
               job_id                      as jobId,
               `name`,
               `exec_mode`                 as execMode,
               `sort`,
               `group_id`                  as groupId,
               `status`,
               `uuid`,
               `is_pre_output_update_node` as isPreOutputUpdateNode
        FROM `autoexec_job_phase`
        WHERE id = #{value}
    </select>
    <select id="getJobLockByOperationId" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`source`,
               aj.`round_count`     as roundCount,
               aj.`param_hash`      as paramHash,
               aj.`config_hash`     as configHash
        FROM `autoexec_job` aj
        WHERE aj.`operation_id` = #{value} for
        update
    </select>
    <select id="getJobPhaseNodeInfoByJobPhaseIdAndResourceId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.port,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        ajp.`name` AS jobPhaseName,
        ajpn.`name` AS nodeName,
        ajpn.`user_name` as userName,
        ajpn.`protocol_id` AS protocolId,
        ajpn.`resource_id` as resourceId,
        ap.`id` AS runnerId,
        ap.`url` AS runnerUrl
        FROM `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ap ON arm.`runner_id` = ap.`id`
        where ajpn.`job_phase_id` = #{jobPhaseId}
        <if test="resourceId == null">
            and ajpn.`resource_id` is null
        </if>
        <if test="resourceId != null">
            and ajpn.`resource_id` = #{resourceId}
        </if>

    </select>

    <select id="getJobPhaseNodeInfoByJobIdAndJobPhaseNameAndResourceId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.port,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        ajp.`name` AS jobPhaseName,
        ajpn.`name` AS nodeName,
        ajpn.`user_name` as userName,
        ajpn.`protocol_id` AS protocolId,
        ajpn.`resource_id` as resourceId,
        ap.`id` AS runnerId,
        ap.`url` AS runnerUrl
        FROM `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ap ON arm.`runner_id` = ap.`id`
        where ajpn.job_id = #{jobId} and ajp.`name` = #{jobPhaseName}
        <if test="resourceId == null">
            and ajpn.`resource_id` is null
        </if>
        <if test="resourceId != null">
            and ajpn.`resource_id` = #{resourceId}
        </if>

    </select>

    <select id="getJobInvokeByJobId" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobInvokeVo">
        SELECT `job_id`    as jobId,
               `invoke_id` as invokeId,
               `source`,
               `type`
        FROM `autoexec_job_invoke`
        where `job_id` = #{value}
    </select>

    <select id="getJobIdByInvokeIdLimitOne" parameterType="java.lang.Long" resultType="java.lang.Long">
        SELECT `job_id`
        FROM `autoexec_job_invoke`
        WHERE `invoke_id` = #{value}
        LIMIT 1
    </select>

    <select id="getJobIdCountListByInvokeIdList" parameterType="java.lang.Long"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobInvokeVo">
        SELECT
        `invoke_id` AS invokeId,
        COUNT(1) AS count
        FROM `autoexec_job_invoke`
        WHERE `invoke_id` in
        <foreach collection="list" item="invokeId" open="(" separator="," close=")">
            #{invokeId}
        </foreach>
        GROUP BY `invoke_id`
    </select>

    <select id="getAutoexecJobEnvValueByJobIdAndName"
            parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobEnvVo" resultType="java.lang.String">
        SELECT `value`
        FROM `autoexec_job_env`
        WHERE `job_id` = #{jobId}
          AND `name` = #{name}
    </select>

    <select id="getAutoexecJobEnvListByJobId" parameterType="java.lang.Long"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobEnvVo">
        SELECT `job_id` AS jobId,
               `name`,
               `value`
        FROM `autoexec_job_env`
        WHERE `job_id` = #{value}
    </select>
    <select id="getJobPhaseRunnerNotCompletedCountByJobIdAndIsFireNextAndGroupSort" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `autoexec_job_phase_runner` ajpr
                 JOIN autoexec_job_phase ajp ON ajpr.job_id = ajp.job_id AND ajpr.job_phase_id = ajp.id
                 JOIN autoexec_job_group ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        WHERE ajg.sort = #{groupSort}
          AND ajpr.job_id = #{jobId}
          AND (ajpr.status != 'completed' OR ajpr.is_fire_next = #{isFireNext})
    </select>

    <select id="getJobPhaseRunnerAbortingCountMapCountByJobId" resultType="java.util.HashMap">
        SELECT ajpr.`job_phase_id`, COUNT(1) as `count`
        FROM `autoexec_job_phase_runner` ajpr
                 JOIN autoexec_job_phase ajp ON ajpr.job_id = ajp.job_id AND ajpr.job_phase_id = ajp.id
        WHERE ajpr.`job_id` = #{jobId}
          AND ajpr.status = 'aborting'
        GROUP BY ajpr.`job_phase_id`
    </select>
    <select id="getAutoexecJobNodeListByJobPhaseIdListAndStatusAndRunnerId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        ajpn.id,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.port,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        ajp.`name` AS jobPhaseName,
        ajpn.`name` AS nodeName,
        ajpn.`user_name` as userName,
        ajpn.`protocol_id` AS protocolId,
        ajpn.`resource_id` as resourceId
        FROM `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.`id` = ajpnr.`node_id`
        WHERE ajpnr.`runner_map_id` = #{runnerId}
        AND ajpn.`job_phase_id` IN
        <foreach collection="jobPhaseIdList" separator="," open="(" close=")" item="jobPhaseId">
            #{jobPhaseId}
        </foreach>
        and ajpn.status = #{status}
    </select>
    <select id="getJobPhaseStatusCountByJobIdAndStatus" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM autoexec_job_phase
        WHERE job_id = #{jobId}
          and `status` = #{status}
    </select>
    <select id="getJobPhaseRunnerByJobIdAndPhaseIdListAndStatus"
            resultType="neatlogic.framework.dto.runner.RunnerMapVo">
        SELECT DISTINCT ar.`id`,
        ar.`name`,
        ar.`url`,
        ar.`host`,
        ar.`port`,
        ajpr.runner_map_id as runnerMapId
        FROM `autoexec_job_phase_runner` ajpr
        LEFT JOIN `runner_map` arm ON ajpr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpr.`job_id` = #{jobId}
        and ajpr.`status` = #{status}
        <if test="jobPhaseIdList != null and jobPhaseIdList.size() > 0">
            and ajpr.`job_phase_id` in
            <foreach collection="jobPhaseIdList" item="jobPhaseId" close=")" open="(" separator=",">
                #{jobPhaseId}
            </foreach>
        </if>
    </select>

    <select id="getJobResourceInspectByResourceId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobResourceInspectVo">
        select resource_id as resourceId,job_id as jobId,phase_id as phaseId,lcd from autoexec_job_resource_inspect
        where resource_id in
        <foreach collection="list" item="resourceId" close=")" open="(" separator=",">
            #{resourceId}
        </foreach>
    </select>
    <select id="getJobByExpiredDays" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`exec_user_type`  as execUserType,
               aj.`source`,
               aj.`round_count`     as roundCount
        FROM `autoexec_job` aj
        WHERE aj.`fcd` &lt;= DATE_SUB(CURDATE(), INTERVAL #{value} DAY)
           or aj.`fcd` is null
    </select>

    <select id="getJobPhaseRunnerMapIdListByJobIdList" resultType="java.lang.Long">
        select distinct runner_map_id from autoexec_job_phase_runner where job_id in
        <foreach collection="list" item="jobId" separator="," open="(" close=")">
            #{jobId}
        </foreach>
    </select>
    <select id="getJobPhaseListByJobIdAndNodeFromJob"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT id,
               job_id      as jobId,
               `name`,
               `exec_mode` as execMode,
               `sort`,
               `lncd`,
               `status`
        FROM `autoexec_job_phase`
        where `node_from` = 'job'
    </select>
    <select id="getJobGroupByJobIdAndSort"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobGroupVo">
        select id, policy, job_id, sort, lncd, round_count as roundCount
        from autoexec_job_group
        where job_id = #{jobId}
          and `sort` = #{sort}
    </select>

    <select id="getJobGroupByJobId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobGroupVo">
        select id, policy, job_id, sort, round_count as roundCount
        from autoexec_job_group
        where job_id = #{jobId}
    </select>

    <select id="getJobRunnerListByJobIdAndGroupId" resultType="neatlogic.framework.dto.runner.RunnerMapVo">
        SELECT DISTINCT ar.`id`,
                        ar.`name`,
                        ar.`url`,
                        ar.`host`,
                        ar.`port`,
                        ajpr.runner_map_id as runnerMapId
        FROM `autoexec_job_phase_runner` ajpr
                 left join `autoexec_job_phase` ajp on ajpr.job_phase_id = ajp.id
                 left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
                 LEFT JOIN `runner_map` arm ON ajpr.`runner_map_id` = arm.`id`
                 LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpr.`job_id` = #{jobId}
          and ajp.group_id = #{groupId}
    </select>
    <select id="getJobRunnerListByJobIdAndJobNodeIdList" resultType="neatlogic.framework.dto.runner.RunnerMapVo">
        SELECT DISTINCT ar.`id`,
        ar.`name`,
        ar.`url`,
        ar.`host`,
        ar.`port`,
        ajpr.runner_map_id as runnerMapId
        FROM `autoexec_job_phase_node_runner` ajpr
        LEFT JOIN `runner_map` arm ON ajpr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpr.`job_id` = #{jobId}
        and ajpr.node_id in
        <foreach collection="nodeIdList" item="nodeId" close=")" separator="," open="(">
            #{nodeId}
        </foreach>

    </select>
    <select id="getJobPhaseNodeRunnerListByJobPhaseId"
            resultType="neatlogic.framework.dto.runner.RunnerMapVo">
        SELECT DISTINCT ar.`id`,
                        ar.`name`,
                        ar.`url`,
                        ar.`host`,
                        ar.`port`,
                        ajpnr.runner_map_id as runnerMapId
        FROM `autoexec_job_phase_node_runner` ajpnr
                 LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
                 LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpnr.`job_phase_id` = #{value}
    </select>
    <select id="getJobPhaseListWithGroupByJobIdAndPhaseIdList"
            resultMap="AutoexecJobPhaseMap">
        SELECT ajp.`id`,
        ajp.`job_id` as jobId,
        ajp.`status`,
        ajp.`start_time` as startTime,
        ajp.`end_time` as endTime,
        ajp.`exec_user` as execUser,
        ajp.`exec_mode` as execMode,
        ajp.`name` as name,
        ajp.`group_id` as groupId,
        ajp.`execute_policy` as executePolicy,
        ajp.`sort`,
        ajp.`warn_count` as warnCount,
        ajg.id as groupId,
        ajg.sort as groupSort,
        ajg.config,
        ajg.policy as groupPolicy,
        ajp.`uuid`,
        ajp.`is_pre_output_update_node` as isPreOutputUpdateNode
        FROM `autoexec_job_phase` ajp
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        WHERE ajp.job_id = #{jobId} and ajp.id in
        <foreach collection="jobPhaseIdList" item="value" separator="," open="(" close=")">
            #{value}
        </foreach>
        ORDER BY ajg.`sort`, ajp.`sort`, ajp.`id`
    </select>

    <select id="searchJobPhaseSqlCount" resultType="int">
        SELECT
        count( ajsd.`id` )
        FROM autoexec_job_sql_detail ajsd
        JOIN autoexec_job_phase ajp ON ajp.job_id = ajsd.job_id AND ajsd.job_phase_name = ajp.name
        <include refid="searchJobPhaseSql"></include>
    </select>

    <select id="searchJobPhaseSql" resultType="neatlogic.framework.autoexec.dto.job.AutoexecSqlNodeDetailVo">
        SELECT
        ajsd.`id`,
        ajsd.`status`,
        ajsd.`sql_file` AS sqlFile,
        ajsd.`start_time` AS startTime,
        ajsd.`end_time` AS endTime,
        r.`host` AS runnerHost,
        r.`port` AS runnerPort,
        r.`url` AS runnerUrl,
        ajsd.resource_id AS resourceId,
        ajsd.`host`,
        ajsd.`port`,
        ajsd.`node_name` AS nodeName,
        ajsd.`is_modified` AS isModified,
        ajsd.`warn_count` AS warnCount,
        ajsd.`is_delete` AS isDelete
        FROM autoexec_job_sql_detail ajsd
        JOIN autoexec_job_phase ajp ON ajp.job_id = ajsd.job_id AND ajsd.job_phase_name = ajp.name
        LEFT JOIN runner r ON r.id = ajsd.runner_id
        <include refid="searchJobPhaseSql"></include>
        order by ajsd.`sort` asc, CONVERT( ajsd.sql_file USING gbk) COLLATE gbk_chinese_ci ASC
        <if test="needPage">
            LIMIT #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="getSqlDetailIdListByJobIdAndPhaseNameAndResourceIdAndLcd" resultType="java.lang.Long">
        SELECT ajsd.`id`
        FROM autoexec_job_sql_detail ajsd
        WHERE ajsd.job_id = #{jobId}
          and ajsd.job_phase_name = #{phaseName}
          and ajsd.resource_id = #{resourceId}
          and ajsd.update_tag != #{updateTag}
          and is_delete = 0
    </select>
    <select id="searchJobPhaseNodeByDistinctResourceIdCount" resultType="java.lang.Integer">
        SELECT
        count( DISTINCT IFNULL(ajpn.`resource_id`,-1))
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp on ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        <where>
            <if test="isDownloadGroup != null and isDownloadGroup == 1">
                ajp.node_from != "0"
            </if>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
    </select>
    <select id="searchJobPhaseNodeByDistinct"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        DISTINCT ajpn.`resource_id` AS resourceId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`protocol_id` AS protocolId,
        ajpn.NAME AS nodeName,
        ajpn.type AS nodeType,
        ajpn.user_name as userName,
        arm.id AS runnerMapId
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN `autoexec_job_group` ajg ON ajp.job_id = ajg.job_id AND ajp.group_id = ajg.id
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        <where>
            <if test="isDownloadGroup != null and isDownloadGroup == 1">
                ajp.node_from != "0"
            </if>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
        ORDER BY ajpn.`host`,ajpn.`port`
        limit #{startNum}, #{pageSize}
    </select>
    <select id="getJobGroupById" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobGroupVo">
        select id, policy, job_id, sort, lncd, config as configStr
        from autoexec_job_group
        where id = #{value}
    </select>

    <select id="getJobSqlIdListByJobIdAndJobPhaseName" resultType="java.lang.Long">
        select id
        from autoexec_job_sql_detail
        where job_id = #{jobId}
          and job_phase_name = #{phaseName}
    </select>

    <select id="getJobSqlListByJobIdAndJobPhaseName"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecSqlNodeDetailVo">
        select ajsd.`id`,
               ajsd.`md5`,
               ajsd.`status`,
               ajsd.`sql_file`    as sqlFile,
               ajsd.`runner_id`   as runnerId,
               ajsd.`resource_id` as resourceId
        from autoexec_job_sql_detail ajsd
        where ajsd.job_id = #{jobId}
          and ajsd.job_phase_name = #{phaseName}
    </select>

    <select id="getJobSqlIdListByJobIdAndJobPhaseNameList" resultType="java.lang.Long">
        select id
        from autoexec_job_sql_detail
        where job_id = #{jobId}
        and job_phase_name in
        <foreach collection="jobPhaseNameList" item="name" separator="," open="(" close=")">
            #{name}
        </foreach>
    </select>
    <select id="getJobPhaseNodeListByJobIdAndPhaseName"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
               ajpn.`job_id`       AS jobId,
               ajpn.`job_phase_id` AS jobPhaseId,
               ajpn.`host`,
               ajpn.`port`,
               ajpn.`start_time`   AS startTime,
               ajpn.`end_time`     AS endTime,
               ajpn.`resource_id`  as resourceId,
               ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
                 join autoexec_job_phase ajp on ajpn.job_phase_id = ajp.id
        where ajpn.`job_id` = #{jobId}
          and ajp.`name` = #{phaseName}
    </select>
    <select id="getJobPhaseNodeListBySqlIdList"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajsd.`id`,
        ajsd.`job_id` AS jobId,
        ajsd.`job_phase_id` AS jobPhaseId,
        ajsd.`host`,
        ajsd.`port`,
        ajsd.`node_name`as nodeName,
        ajsd.`node_type` as nodeType,
        ajsd.`start_time` AS startTime,
        ajsd.`end_time` AS endTime,
        ajsd.`resource_id` as resourceId,
        ajsd.`user_name` as userName,
        ajsd.`status`,
        ajsd.runner_id as runnerMapId,
        ajsd.sql_file as sqlFile,
        r.url as runnerUrl
        from autoexec_job_sql_detail ajsd
        left join runner_map rm on rm.id = ajsd.runner_id
        left join runner r on r.id = rm.runner_id
        where ajsd.id in
        <foreach collection="sqlIdList" item="sqlId" close=")" open="(" separator=",">
            #{sqlId}
        </foreach>
    </select>

    <select id="getJobSqlDetailListByJobIdAndPhaseName"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecSqlNodeDetailVo">
        SELECT ajsd.`id`,
        ajsd.`md5`,
        ajsd.`status`,
        ajsd.`sql_file` as sqlFile,
        ajsd.`runner_id` as runnerId,
        ajsd.`resource_id` as resourceId,
        ajsd.`host`,
        ajsd.`port`,
        ajsd.`node_name` as nodeName,
        ajsd.`node_type` as nodeType,
        ajsd.`user_name` as username
        FROM autoexec_job_sql_detail ajsd
        JOIN autoexec_job_phase ajp ON ajp.job_id = ajsd.job_id AND ajsd.job_phase_name = ajp.name
        where ajsd.job_id = #{jobId}
        and ajsd.job_phase_name = #{phaseName}
        <if test="sqlFileList != null and sqlFileList.size() > 0">
            AND ajsd.`sql_file` IN
            <foreach collection="sqlFileList" item="sqlFile" open="(" separator="," close=")">
                #{sqlFile}
            </foreach>
        </if>
    </select>

    <select id="getJobSqlByResourceIdAndJobIdAndJobPhaseNameAndSqlFile"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecSqlNodeDetailVo">
        select ajsd.`id`,
               ajsd.`md5`,
               ajsd.`status`,
               ajsd.`sql_file`    as sqlFile,
               ajsd.`runner_id`   as runnerId,
               ajsd.`resource_id` as resourceId
        from autoexec_job_sql_detail ajsd
        where resource_id = #{resourceId}
          and job_id = #{jobId}
          and job_phase_name = #{phaseName}
          and sql_file = #{sqlFile}
    </select>

    <select id="getJobSqlById"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecSqlNodeDetailVo">
        select ajsd.`id`,
               ajsd.`md5`,
               ajsd.`status`,
               ajsd.`host`,
               ajsd.`port`,
               ajsd.`job_phase_name` as phaseName,
               ajsd.`job_id`         as jobId,
               ajsd.`sql_file`       as sqlFile,
               ajsd.`runner_id`      as runnerId,
               ajsd.`resource_id`    as resourceId
        from autoexec_job_sql_detail ajsd
        where ajsd.id = #{id}
    </select>
    <select id="getJobSqlByJobPhaseIdAndResourceIdAndSqlName"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecSqlNodeDetailVo">
        select ajsd.`id`,
               ajsd.`md5`,
               ajsd.`status`,
               ajsd.`host`,
               ajsd.`port`,
               ajsd.`job_phase_name` as phaseName,
               ajsd.`job_id`         as jobId,
               ajsd.`sql_file`       as sqlFile,
               ajsd.`runner_id`      as runnerId,
               ajsd.`resource_id`    as resourceId
        from autoexec_job_sql_detail ajsd
        where ajsd.`job_phase_id` = #{jobPhaseId}
          and ajsd.`resource_id` = #{resourceId}
          and ajsd.`sql_file` = #{sqlName}
    </select>
    <select id="getJobPhaseRunnerByJobIdAndPhaseIdList"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseRunnerVo">
        SELECT
        job_id as jobId,
        job_group_id as jobGroupId,
        job_phase_id as jobPhaseId,
        `status`,
        runner_map_id as runnerMapId,
        is_fire_next as isFireNext,
        lcd,
        warn_count as warnCount
        FROM
        autoexec_job_phase_runner
        where job_id = #{jobId} and job_phase_id in
        <foreach collection="jobPhaseIdList" item="jobPhaseId" open="(" close=")" separator=",">
            #{jobPhaseId}
        </foreach>
    </select>

    <sql id="searchJobPhaseSql">
        <where>
            <if test="statusList != null and statusList.size() > 0 ">
                and ajsd.`status` in
                <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                    #{status}
                </foreach>
            </if>
            <if test="keyword != null and keyword != ''">
                and (ajsd.`node_name` like concat('%',#{keyword},'%') or ajsd.`host` like concat('%',#{keyword},'%'))
            </if>
            <if test="isDelete != null">
                and ajsd.`is_delete` = #{isDelete}
            </if>
            and ajsd.job_id= #{jobId}
            and ajsd.job_phase_id= #{jobPhaseId}
        </where>
    </sql>

    <select id="getAutoexecJobNodeListByResourceIdList" parameterType="java.lang.Long"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        a.`id`,
        a.`job_id` AS jobId,
        a.`status`,
        a.`resource_id` as resourceId
        from autoexec_job_phase_node a
        join autoexec_job_resource_inspect b on b.`phase_id` = a.`job_phase_id` and b.`resource_id` = a.`resource_id`
        where a.`resource_id` in
        <foreach collection="list" item="resourceId" open="(" separator="," close=")">
            #{resourceId}
        </foreach>
    </select>

    <select id="getAutoexecJobNodeListByJobIdAndResourceIdList"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        a.`id`,
        a.`job_id` AS jobId,
        a.`status`,
        a.`resource_id` as resourceId
        FROM autoexec_job_phase_node a
        WHERE a.`job_id` = #{jobId} AND a.`resource_id` IN
        <foreach collection="resourceIdList" item="resourceId" open="(" separator="," close=")">
            #{resourceId}
        </foreach>
    </select>
    <select id="getJobSqlDetailListByJobIdAndPhaseNameAndExceptStatusAndRunnerMapId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecSqlNodeDetailVo">
        select ajsd.`id`,
        ajsd.`md5`,
        ajsd.`status`,
        ajsd.`sql_file` as sqlFile,
        ajsd.`runner_id` as runnerId,
        ajsd.`resource_id` as resourceId
        from autoexec_job_sql_detail ajsd
        where ajsd.job_id = #{jobId}
        and ajsd.job_phase_name = #{jobPhaseName}
        and ajsd.`runner_id` = #{runnerMapId}
        and ajsd.`status` not in
        <foreach collection="exceptStatusList" item="status" separator="," close=")" open="(">
            #{status}
        </foreach>
    </select>
    <select id="getJobListLockByParentIdAndStatus"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`source`,
               aj.`round_count`     as roundCount,
               aj.`param_hash`      as paramHash,
               aj.`config_hash`     as configHash,
               aj.`trigger_type`    as triggerType
        FROM `autoexec_job` aj
        WHERE aj.`parent_id` = #{parentId}
          and aj.`status` = #{status} for
        update
    </select>
    <select id="getJobListByParentIdAndNotInStatus"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`source`,
               aj.`round_count`     as roundCount,
               aj.`param_hash`      as paramHash,
               aj.`config_hash`     as configHash,
               aj.`trigger_type`    as triggerType
        FROM `autoexec_job` aj
        WHERE aj.`parent_id` = #{parentId}
          and aj.`status` != #{status}
    </select>

    <resultMap id="parentJobListMap" type="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        <id column="parentId" property="id"/>
        <collection property="children" ofType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="status" property="status"/>
            <result column="errorMsg" property="errorMsg"/>
            <result column="planStartTime" property="planStartTime"/>
            <result column="startTime" property="startTime"/>
            <result column="endTime" property="endTime"/>
            <result column="operationId" property="operationId"/>
            <result column="operationType" property="operationType"/>
            <result column="execUser" property="execUser"/>
            <result column="execUserType" property="execUserType"/>
            <result column="source" property="source"/>
            <result column="roundCount" property="roundCount"/>
            <result column="source" property="source"/>
            <result column="source" property="source"/>
            <result column="triggerType" property="triggerType"/>
            <result column="parentId" property="parentId"/>
            <result column="reviewer" property="reviewer"/>
            <result column="reviewStatus" property="reviewStatus"/>
            <result column="reviewTime" property="reviewTime"/>
            <result column="scenarioName" property="scenarioName"/>
        </collection>
    </resultMap>

    <select id="getParentAutoexecJobListIdList" resultMap="parentJobListMap">
        SELECT ajj.`parent_id` as parentId,
        ajj.`id` as id,
        ajj.`name` as name,
        ajj.`status` as status,
        ajj.`plan_start_time` as planStartTime,
        ajj.`start_time` as startTime,
        ajj.`end_time` as endTime,
        ajj.`operation_id` as operationId,
        ajj.`operation_type` as operationType,
        ajj.`exec_user` as execUser,
        ajj.`exec_user_type` as execUserType,
        ajj.`source` as source,
        ajj.`round_count` as roundCount,
        ajj.`trigger_type` as triggerType,
        ajj.`parent_id` as parentId,
        ajj.`reviewer` as reviewer,
        ajj.`review_status` as reviewStatus,
        ajj.`review_time` as reviewTime,
        e.`name` as scenarioName
        FROM autoexec_job ajj
        join deploy_job dj ON dj.id = ajj.id
        left join autoexec_scenario e on dj.scenario_id = e.id
        where ajj.parent_id in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="getJobWarnCountAndStatus" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT
        job_id as id,
        SUM( warn_count ) AS warnCount,
        GROUP_CONCAT(DISTINCT STATUS) as `status`
        FROM
        autoexec_job_phase_node
        WHERE
        job_id IN
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
        GROUP BY
        job_id
    </select>
    <select id="getJobListByIdList" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
        aj.`name`,
        aj.`status`,
        aj.`plan_start_time` as planStartTime,
        aj.`start_time` as startTime,
        aj.`end_time` as endTime,
        aj.`operation_id` as operationId,
        aj.`operation_type` as operationType,
        aj.`exec_user` as execUser,
        aj.`exec_user_type` as execUserType,
        aj.`source`,
        aj.`round_count` as roundCount,
        aj.`param_hash` as paramHash,
        aj.`config_hash` as configHash,
        aj.`lncd`,
        aj.`parent_id` as parentId,
        aj.`trigger_type` as triggerType
        FROM `autoexec_job` aj
        WHERE aj.`id` in
        <foreach collection="list" item="id" close=")" open="(" separator=",">
            #{id}
        </foreach>
    </select>
    <select id="getJobPhaseListByJobIdAndPhaseUuidList" resultMap="AutoexecJobPhaseMap">
        SELECT ajp.`id`,
        ajp.`job_id` as jobId,
        ajp.`status`,
        ajp.`start_time` as startTime,
        ajp.`end_time` as endTime,
        ajp.`exec_user` as execUser,
        ajp.`exec_mode` as execMode,
        ajp.`name` as name,
        ajp.`sort`,
        ajp.`uuid`,
        ajg.id as groupId,
        ajg.sort as groupSort,
        ajg.config,
        ajg.policy as groupPolicy
        FROM `autoexec_job_phase` ajp
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        where ajp.job_id = #{jobId} and ajp.`uuid` in
        <foreach collection="phaseUuidList" item="phaseUuid" separator="," open="(" close=")">
            #{phaseUuid}
        </foreach>
    </select>
    <select id="getLatestJobByInvokeId" resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`exec_user_type`  as execUserType,
               aj.`source`,
               aj.`round_count`     as roundCount,
               aj.`param_hash`      as paramHash,
               aj.`config_hash`     as configHash,
               aj.`lncd`,
               aj.`parent_id`       as parentId,
               aj.`trigger_type`    as triggerType,
               aj.`fcd`
        FROM `autoexec_job` aj
                 left join autoexec_job_invoke aji on aj.id = aji.job_id
        where aji.invoke_id = #{value}
        order by aj.`id` desc
        limit 1
    </select>

    <select id="getJobPhaseOperationCustomTemplateListByJobPhaseId" parameterType="java.lang.Long"
            resultType="neatlogic.framework.autoexec.dto.customtemplate.CustomTemplateVo">
        SELECT a.id,
               a.`name`,
               a.template,
               a.config,
               b.id AS operationId
        FROM autoexec_customtemplate a
                 JOIN autoexec_script b ON a.id = b.customtemplate_id
        WHERE b.id IN (
            SELECT operation_id
            FROM `autoexec_job_phase_operation`
            WHERE job_phase_id = #{value}
              AND `type` = 'script'
        )
        UNION
        SELECT a.id,
               a.`name`,
               a.template,
               a.config,
               b.id AS operationId
        FROM autoexec_customtemplate a
                 JOIN autoexec_tool b ON a.id = b.customtemplate_id
        WHERE b.id IN (
            SELECT operation_id
            FROM `autoexec_job_phase_operation`
            WHERE job_phase_id = #{value}
              AND `type` = 'tool'
        )
    </select>

    <select id="getJobPhaseOpertionIdListByJobPhaseId" parameterType="java.lang.Long" resultType="java.lang.Long">
        SELECT operation_id
        FROM `autoexec_job_phase_operation`
        WHERE job_phase_id = #{value}
        ORDER BY sort
    </select>

    <select id="getMaxSortJobPhaseOperationByPhaseIdAndOperationId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT id, `name`, `type`
        FROM `autoexec_job_phase_operation`
        WHERE job_phase_id = #{jobPhaseId}
          AND operation_id = #{operationId}
        ORDER BY sort desc
        LIMIT 1
    </select>

    <select id="getJobPhaseListByJobId" parameterType="java.lang.Long"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT ajp.`id`,
               ajp.`job_id`         as jobId,
               ajp.`status`,
               ajp.`start_time`     as startTime,
               ajp.`end_time`       as endTime,
               ajp.`exec_user`      as execUser,
               ajp.`exec_mode`      as execMode,
               ajp.`name`           as name,
               ajp.`group_id`       as groupId,
               ajp.`execute_policy` as executePolicy,
               ajp.`sort`,
               ajp.`warn_count`     as warnCount,
               ajp.`round_count`    as roundCount
        FROM `autoexec_job_phase` ajp
        where ajp.`job_id` = #{value}
        ORDER BY ajp.`sort`
    </select>
    <select id="getJobPhaseNodeCountWithoutDeleteByJobIdAndPhaseId" resultType="java.lang.Integer">
        SELECT count(1)
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_id` = #{jobId}
          and ajpn.`job_phase_id` = #{phaseId}
          and ajpn.`is_delete` = 0
    </select>
    <select id="getJobPhaseNodeCountWithoutDeleteByJobIdAndPhaseIdAndExceptStatusList"
            resultType="java.lang.Integer">
        SELECT count(1)
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_id` = #{jobId}
        and ajpn.`job_phase_id` = #{phaseId}
        and ajpn.`is_delete` = 0
        and ajpn.`status` not in
        <foreach collection="statusList" item="status" separator="," open="(" close=")">
            #{status}
        </foreach>
    </select>
    <select id="getJobPhaseRunnerStatusByJobIdAndPhaseId"
            resultType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseRunnerVo">
        select ajpn.job_id                          as jobId,
               ajpn.job_phase_id                    as jobPhaseId,
               GROUP_CONCAT(DISTINCT ajpn.`status`) as status,
               ajpnr.runner_map_id                  as runnerMapId
        from autoexec_job_phase_node ajpn
                 JOIN autoexec_job_phase_node_runner ajpnr on ajpn.id = ajpnr.node_id
        where ajpn.job_id = #{jobId}
          and ajpn.job_phase_id = #{jobPhaseId}
        group by ajpn.job_id, ajpn.job_phase_id, ajpnr.runner_map_id
    </select>

    <insert id="insertJob" parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        INSERT INTO `autoexec_job` (`id`,
        `name`,
        `status`,
        <if test="planStartTime != null">
            `plan_start_time`,
        </if>
        `operation_id`,
        `operation_type`,
        `round_count`,
        `param_hash`,
        `exec_user`,
        `exec_user_type`,
        `config_hash`,
        <if test="triggerType != null and triggerType !='' ">
            `trigger_type`,
        </if>
        <if test="parentId != null">
            `parent_id`,
        </if>
        `source`,
        `scenario_id`,
        `fcd`,
        `fcu`
        )
        VALUES (#{id},
        #{name},
        #{status},
        <if test="planStartTime != null">
            #{planStartTime},
        </if>
        #{operationId},
        #{operationType},
        #{roundCount},
        #{paramHash},
        #{execUser},
        #{execUserType},
        #{configHash},
        <if test="triggerType != null and triggerType !='' ">
            #{triggerType},
        </if>
        <if test="parentId != null">
            #{parentId},
        </if>
        #{source},
        #{scenarioId},
        now(),
        #{fcu}
        )
    </insert>

    <insert id="insertJobPhase" parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        INSERT INTO `autoexec_job_phase` (`id`,
                                          `job_id`,
                                          `name`,
                                          `status`,
                                          `exec_user`,
                                          `exec_mode`,
                                          `lcd`,
                                          `group_id`,
                                          `execute_policy`,
                                          `uuid`,
                                          `is_pre_output_update_node`,
                                          `round_count`,
                                          `sort`)
        VALUES (#{id},
                #{jobId},
                #{name},
                #{status},
                #{execUser},
                #{execMode},
                now(3),
                #{groupId},
                #{executePolicy},
                #{uuid},
                #{isPreOutputUpdateNode},
                #{roundCount},
                #{sort})
    </insert>

    <insert id="insertJobPhaseNode"
            parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        INSERT INTO `autoexec_job_phase_node` (`id`,
                                               `job_id`,
                                               `job_phase_id`,
                                               `host`,
                                               `port`,
                                               `protocol_id`,
                                               `name`,
                                               `type`,
                                               `user_name`,
                                               `resource_id`,
                                               `lcd`,
                                               `status`)
        VALUES (#{id},
                #{jobId},
                #{jobPhaseId},
                #{host},
                #{port},
                #{protocolId},
                #{nodeName},
                #{nodeType},
                #{userName},
                #{resourceId},
                #{lcd},
                #{status})
    </insert>

    <insert id="insertJobPhaseOperation"
            parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        INSERT INTO `autoexec_job_phase_operation` (`id`,
        `job_id`,
        `job_phase_id`,
        `name`,
        `type`,
        `parser`,
        `exec_mode`,
        `fail_policy`,
        <if test="type != null and type == 'script'">
            `version_id`,
        </if>
        `sort`,
        `operation_id`,
        `profile_id`,
        `uuid`,
        `letter`,
        <if test="parentOperationId != null">
            `parent_operation_id`,
        </if>
        <if test="parentOperationType != null">
            `parent_operation_type`,
        </if>
        `param_hash`)
        VALUES (#{id},
        #{jobId},
        #{jobPhaseId},
        #{name},
        #{type},
        #{parser},
        #{execMode},
        #{failPolicy},
        <if test="type != null and type == 'script'">
            #{versionId},
        </if>
        #{sort},
        #{operationId},
        #{profileId},
        #{uuid},
        #{letter},
        <if test="parentOperationId != null">
            #{parentOperationId},
        </if>
        <if test="parentOperationType != null">
            #{parentOperationType},
        </if>
        #{paramHash})
    </insert>

    <insert id="insertIgnoreJobContent"
            parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobContentVo">
        INSERT IGNORE INTO `autoexec_job_content` (`hash`, `content`)
        VALUES (#{hash}, #{content})
    </insert>

    <insert id="insertIgnoreJobPhaseNodeRunner"
            parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeRunnerVo">
        INSERT ignore INTO `autoexec_job_phase_node_runner` (`job_id`, `job_phase_id`, `node_id`, `runner_map_id`)
        VALUES (#{jobId}, #{jobPhaseId}, #{nodeId}, #{runnerMapId})
    </insert>

    <insert id="insertJobPhaseRunner">
        INSERT INTO `autoexec_job_phase_runner` (`job_id`, `job_group_id`, `job_phase_id`, `runner_map_id`, `lcd`)
        VALUES (#{jobId}, #{jobGroupId}, #{jobPhaseId}, #{runnerMapId}, #{lcd})
        ON DUPLICATE KEY
            UPDATE `job_id`        = #{jobId},
                   `job_group_id`  = #{jobGroupId},
                   `job_phase_id`  = #{jobPhaseId},
                   `runner_map_id` = #{runnerMapId},
                   `lcd`           = #{lcd}
    </insert>

    <insert id="insertDuplicateJobEnv" parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobEnvVo">
        INSERT INTO `autoexec_job_env` (`job_id`, `name`, `value`)
        VALUES (#{jobId}, #{name}, #{value})
        ON DUPLICATE KEY
            UPDATE `job_id` = #{jobId},
                   `name`   = #{name},
                   `value`  = #{value}
    </insert>

    <insert id="insertJobInvoke">
        INSERT INTO `autoexec_job_invoke` (`job_id`, `invoke_id`, `source`, `type`)
        VALUES (#{jobId}, #{invokeId}, #{source}, #{type})
    </insert>

    <insert id="insertDuplicateJobResourceInspect">
        INSERT INTO `autoexec_job_resource_inspect` (`job_id`, `resource_id`, `phase_id`, `lcd`)
        VALUES (#{jobId}, #{resourceId}, #{phaseId}, #{lcd})
        ON DUPLICATE KEY
            UPDATE `job_id`      = #{jobId},
                   `resource_id` = #{resourceId},
                   `phase_id`    = #{phaseId},
                   `lcd`         = #{lcd}
    </insert>
    <insert id="insertJobGroup">
        INSERT INTO `autoexec_job_group` (`id`, `job_id`, `sort`, `policy`, `config`, `round_count`)
        values (#{id}, #{jobId}, #{sort}, #{policy}, #{configStr}, #{roundCount})
    </insert>

    <insert id="insertSqlDetail" parameterType="neatlogic.framework.autoexec.dto.job.AutoexecSqlNodeDetailVo">
        insert into `autoexec_job_sql_detail`(`id`,
        `job_id`,
        `host`,
        `port`,
        `resource_id`,
        `node_name`,
        `runner_id`,
        `job_phase_id`,
        `job_phase_name`,
        `sql_file`,
        `status`,
        `md5`,
        `is_modified`,
        `warn_count`,
        <choose>
            <when test="status == 'pending'">
            </when>
            <when test="status == 'running'">
                `start_time`,
            </when>
            <otherwise>
                `end_time`,
            </otherwise>
        </choose>
        `is_delete`,
        `round_count`)
        values (#{id},
        #{jobId},
        #{host},
        #{port},
        #{resourceId},
        #{nodeName},
        #{runnerId},
        #{phaseId},
        #{phaseName},
        #{sqlFile},
        <choose>
            <when test="status != null">
                #{status},
            </when>
            <otherwise>
                'pending',
            </otherwise>
        </choose>
        #{md5},
        <choose>
            <when test="isModified != null">
                #{isModified},
            </when>
            <otherwise>
                0,
            </otherwise>
        </choose>
        <choose>
            <when test="warnCount != null">
                #{warnCount},
            </when>
            <otherwise>
                0,
            </otherwise>
        </choose>
        <choose>
            <when test="status == 'pending'">
            </when>
            <when test="status == 'running'">
                now(3),
            </when>
            <otherwise>
                now(3),
            </otherwise>
        </choose>
        #{isDelete},
        #{roundCount})
    </insert>

    <insert id="insertSqlDetailList">
        insert into `autoexec_job_sql_detail`(`id`, `job_id`,`host`,`port`,
        `resource_id`,`node_name`,`node_type`,`user_name`,`runner_id`,`job_phase_id`,`job_phase_name`,
        `sql_file`, `status`, `md5`,`update_tag`,
        `is_delete`,`is_modified`,`warn_count`,`sort`)
        values
        <foreach collection="sqlList" item="vo" separator="," index="index">
            (#{vo.id},
            #{vo.jobId},
            #{vo.host},
            #{vo.port},
            #{vo.resourceId},
            #{vo.nodeName},
            #{vo.nodeType},
            #{vo.username},
            #{runnerId},
            #{phaseId},
            #{phaseName},
            #{vo.sqlFile},
            <choose>
                <when test="vo.status != null">
                    #{vo.status},
                </when>
                <otherwise>
                    'pending',
                </otherwise>
            </choose>
            #{vo.md5},
            #{updateTag},
            #{vo.isDelete},
            <choose>
                <when test="vo.isModified != null">
                    #{vo.isModified},
                </when>
                <otherwise>
                    0,
                </otherwise>
            </choose>
            <choose>
                <when test="vo.warnCount != null">
                    #{vo.warnCount},
                </when>
                <otherwise>
                    0,
                </otherwise>
            </choose>
            #{index})
        </foreach>
        ON DUPLICATE KEY
        UPDATE `update_tag`=#{updateTag},
        `is_delete`= 0,
        `sort` = VALUES(`sort`),
        `md5` = VALUES(`md5`),
        `is_modified` = VALUES(`is_modified`),
        `warn_count` = VALUES(`warn_count`)
    </insert>

    <update id="updateJobPhaseStatus" parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        UPDATE `autoexec_job_phase`
        SET `status` = #{status}
        <if test="status == 'running'">
            ,`start_time` = NOW(3)
            ,`end_time` = NULL
        </if>
        <if test="status == 'completed' or status == 'failed'">
            ,`end_time` = NOW(3)
        </if>
        <if test="warnCount != null">
            ,`warn_count` = #{warnCount}
        </if>
        WHERE id = #{id}
    </update>

    <update id="updateJobStatus" parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        UPDATE `autoexec_job`
        SET `status` = #{status}
        <if test="status == 'running' and isFirstFire == 1">
            ,`start_time` = NOW(3)
            ,`end_time` = NULL
        </if>
        <if test="status == 'completed' or status == 'failed' or status == 'aborted' or status == 'paused'">
            ,`end_time` = NOW(3)
        </if>
        WHERE id = #{id}
    </update>

    <update id="updateJobPhaseRunnerStatusBatch">
        UPDATE `autoexec_job_phase_runner`
        SET `status` = #{status}
        WHERE job_phase_id in
        <foreach collection="phaseIdList" item="phaseId" separator="," open="(" close=")">
            #{phaseId}
        </foreach>
        <if test="runnerId != null">
            and runner_map_id = #{runnerId}
        </if>
    </update>

    <update id="updateJobPhaseNodeStatus" parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        UPDATE
        `autoexec_job_phase_node`
        SET
        <if test="status == 'running'">
            `start_time` = NOW(3),
            `end_time` = null,
        </if>
        <if test="status == 'succeed' or status == 'failed' or status == 'ignored' or status == 'paused'">
            `end_time` = NOW(3),
        </if>
        <if test="warnCount != null">
            `warn_count` = #{warnCount},
        </if>
        <if test="isExecuted != null">
            `is_executed` = #{isExecuted},
        </if>
        `status` = #{status}
        WHERE `job_id` = #{jobId}
        AND `job_phase_id` = #{jobPhaseId}
        AND `id` = #{id}
    </update>
    <update id="updateJobPhaseStatusByJobId">
        UPDATE `autoexec_job_phase`
        SET `status`     = #{status}
          , `start_time` = NULL

          , `end_time`   = NULL
        WHERE `job_id` = #{jobId}
    </update>
    <update id="updateJobPhaseNodeStatusByJobIdAndIsDelete">
        UPDATE `autoexec_job_phase_node`
        SET `status`     = #{status}
          , `start_time` = NULL

          , `end_time`   = NULL
        WHERE `job_id` = #{jobId}
          and `is_delete` = #{isDelete}
    </update>
    <update id="updateJobPhaseNodeStatusByJobPhaseIdAndIsDelete">
        UPDATE `autoexec_job_phase_node`
        SET `status`     = #{status}
          , `start_time` = NULL
          , `end_time`   = NULL
        WHERE `job_phase_id` = #{jobPhaseId}
          and `is_delete` = #{isDelete}
    </update>
    <update id="updateJobPhaseRunnerStatus">
        UPDATE
        `autoexec_job_phase_runner`
        SET
        `status` = #{status}
        WHERE `job_phase_id` in
        <foreach collection="jobPhaseIdList" item="phaseId" separator="," open="(" close=")">
            #{phaseId}
        </foreach>
        AND `runner_map_id` = #{runnerId}
    </update>
    <update id="updateJobPhaseRunnerStatusAndWarnCount">
        UPDATE
        `autoexec_job_phase_runner`
        SET
        `status` = #{status}
        <if test="warnCount != null">
            ,`warn_count` = #{warnCount}
        </if>
        WHERE `job_phase_id` in
        <foreach collection="jobPhaseIdList" item="phaseId" separator="," open="(" close=")">
            #{phaseId}
        </foreach>
        AND `runner_map_id` = #{runnerId}
    </update>
    <update id="updateJobPhaseRunnerStatusByJobIdAndRunnerIdAndStatus">
        UPDATE
            `autoexec_job_phase_runner`
        SET `status` = #{status}
        WHERE `job_id` = #{jobId}
          AND `runner_map_id` = #{runnerId}
    </update>
    <update id="updateBatchJobPhaseRunnerStatus">
        UPDATE
            `autoexec_job_phase_runner`
        SET `status` = #{status}
        WHERE `job_phase_id` = #{jobPhaseId}
    </update>
    <update id="updateJobPhaseNodeListStatus">
        UPDATE
        `autoexec_job_phase_node`
        SET
        `status` = #{status},
        <if test="status == 'pending'">
            `start_time` = null,
        </if>
        <if test="status == 'pending'">
            `end_time` = null
        </if>
        WHERE `id` in
        <foreach collection="nodeIdList" item="nodeId" open="(" close=")" separator=",">
            #{nodeId}
        </foreach>
        and `is_delete` = 0
    </update>
    <update id="updateJobPhaseStatusByPhaseIdList">
        UPDATE
        `autoexec_job_phase`
        SET
        `status` = #{status}
        WHERE `id` in
        <foreach collection="phaseIdList" item="phaseId" open="(" close=")" separator=",">
            #{phaseId}
        </foreach>
    </update>
    <update id="updateJobPhaseNodeById">
        UPDATE
            `autoexec_job_phase_node`
        SET `status`     = #{status},
            `start_time` = #{startTime},
            `end_time`   = #{endTime}
        WHERE `id` = #{id}
    </update>

    <update id="updateJobPhaseNodeByJobIdAndPhaseIdAndResourceId">
        UPDATE
        `autoexec_job_phase_node`
        SET `status` = #{status},
        `start_time` = #{startTime},
        `end_time` = #{endTime},
        `is_delete` = 0,
        `lcd` = #{lcd}
        WHERE `job_id` = #{jobId}
        and `job_phase_id` = #{jobPhaseId}
        <if test="resourceId == null">
            and `resource_id` is null
        </if>
        <if test="resourceId != null">
            and `resource_id` = #{resourceId}
        </if>

    </update>

    <update id="updateJobPhaseNodeStatusByJobIdAndJobPhaseIdListAndRunnerId">
        UPDATE
        `autoexec_job_phase_node`
        SET
        `end_time` = NOW(3),
        `status` = #{status}
        WHERE `job_id` = #{jobId}
        AND `job_phase_id` in
        <foreach collection="jobPhaseIdList" item="jobPhaseId" separator="," open="(" close=")">
            #{jobPhaseId}
        </foreach>
        and `status` in
        <foreach collection="nodeStatusList" item="nodeStatus" open="(" separator="," close=")">
            #{nodeStatus}
        </foreach>
    </update>
    <update id="updateJobPhaseRunnerFireNextByPhaseIdAndRunnerId">
        update `autoexec_job_phase_runner`
        set is_fire_next = #{isFireNext}
        where job_phase_id = #{phaseId}
          and runner_map_id = #{runnerMapId}
    </update>
    <update id="updateJobPhaseRunnerFireNextByJobIdAndGroupSortAndRunnerId">
        update autoexec_job_phase_runner ajpr
            join autoexec_job_group ajg on ajpr.job_id = ajg.job_id and ajpr.job_group_id = ajg.id
        set ajpr.is_fire_next = #{isFireNext}
        where ajpr.job_id = #{jobId}
          and ajg.sort = #{groupSort}
          and ajpr.runner_map_id = #{runnerMapId}
    </update>
    <update id="updateJobPhaseLcdById">
        update `autoexec_job_phase`
        set `lcd` = #{lcd}
        where id = #{jobPhaseId}
    </update>
    <update id="updateJobParamHashById">
        update `autoexec_job`
        set `param_hash` = #{paramHash}
        where `id` = #{jobId}
    </update>

    <update id="updateJobPhaseFrom">
        update `autoexec_job_phase`
        set `node_from`      = #{nodeFrom},
            `user_name_from` = #{userNameFrom},
            `protocol_from`  = #{protocolFrom}
        where id = #{currentPhase.id}
    </update>
    <update id="updateJobPhaseNodeResetStartTimeAndEndTimeByNodeIdList">
        update `autoexec_job_phase_node`
        set `start_time` = null , `end_time` = null
        where id in
        <foreach collection="nodeIdList" item="nodeId" open="(" separator="," close=")">
            #{nodeId}
        </foreach>
    </update>
    <update id="updateJobPhaseLncdById">
        update `autoexec_job_phase`
        set `lncd` = #{lcd}
        where id = #{jobPhaseId}
    </update>

    <update id="updateJobPlanStartTimeAndTriggerTypeById"
            parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        UPDATE `autoexec_job`
        SET `plan_start_time` = #{planStartTime},
            `trigger_type`    = #{triggerType}
        WHERE `id` = #{id}
    </update>

    <update id="updateJobExecUser" parameterType="neatlogic.framework.autoexec.dto.job.AutoexecJobVo">
        UPDATE `autoexec_job`
        SET `exec_user` = #{execUser}
        WHERE `id` = #{jobId}
    </update>

    <update id="updateSqlIsDeleteByIdList">
        UPDATE autoexec_job_sql_detail
        SET `is_delete` = 1,
        sort = 999999
        WHERE `id` IN
        <foreach collection="idList" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <update id="updateSqlDetailById">
        UPDATE autoexec_job_sql_detail
        SET `md5` = #{md5},
        <if test="status != null">
            `status` = #{status},
        </if>
        `node_name` = #{nodeName},
        `host` = #{host},
        `port` = #{port},
        <if test="isModified != null">
            `is_modified` = #{isModified},
        </if>
        <if test="warnCount != null">
            `warn_count` = #{warnCount},
        </if>
        <choose>
            <when test="status == 'pending'">
            </when>
            <when test="status == 'running'">
                `start_time`=now(3),
            </when>
            <otherwise>
                `end_time`=now(3),
            </otherwise>
        </choose>
        `is_delete` = 0
        WHERE
        `id` = #{id}
    </update>

    <delete id="updateJobPhaseNodeIsDeleteByJobPhaseIdAndLcd">
        update
            `autoexec_job_phase_node`
        set `is_delete` = 1
        where `job_phase_id` = #{jobPhaseId}
          and (`lcd` != #{lcd} OR `lcd` IS NULL)
          and `is_delete` != 1
    </delete>

    <update id="updateJobLncdById">
        update `autoexec_job`
        set `lncd` = #{lcd}
        where id = #{jobId}
    </update>

    <update id="updateJobGroupLncdById">
        update `autoexec_job_group`
        set `lncd` = #{lcd}
        where id = #{jobGroupId}
    </update>

    <update id="resetJobSqlStatusBySqlIdList">
        UPDATE autoexec_job_sql_detail
        SET `status` = "pending",
        `start_time` = null,
        `end_time` = null
        WHERE id IN
        <foreach collection="idList" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>

    <update id="updateJobPhaseOperationVersionIdByJobIdAndOperationId">
        update autoexec_job_phase_operation
        set `version_id` = #{versionId}
        where `job_id` = #{jobId}
          and `operation_id` = #{operationId}
    </update>
    <update id="updateJobPhaseStatusByJobIdAndPhaseStatus">
        UPDATE
            `autoexec_job_phase`
        SET `status` = #{status}
        WHERE `job_id` = #{jobId}
          and `status` = #{whereStatus}
    </update>
    <update id="updateSqlStatusByIdList">
        UPDATE autoexec_job_sql_detail
        set `status` = #{status}
        where id in
        <foreach collection="idList" item="id" close=")" open="(" separator=",">
            #{id}
        </foreach>
    </update>
    <update id="updateJobLocalRunnerId">
        UPDATE autoexec_job
        set `runner_map_id` = #{runnerId}
        where id = #{jobId}
    </update>

    <delete id="deleteJobContentByHash" parameterType="java.lang.String">
        DELETE
        FROM `autoexec_job_content`
        WHERE `hash` = #{value}
    </delete>

    <delete id="deleteJobPhaseOperationByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job_phase_operation`
        WHERE `job_id` = #{value}
    </delete>

    <delete id="deleteJobPhaseNodeByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job_phase_node`
        WHERE `job_id` = #{value}
          and `is_executed` = 0
    </delete>

    <delete id="deleteJobPhaseByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job_phase`
        WHERE `job_id` = #{value}
    </delete>

    <delete id="deleteJobByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job`
        WHERE `id` = #{value}
    </delete>

    <delete id="deleteJobPhaseNodeByJobPhaseIdList">
        DELETE
        FROM `autoexec_job_phase_node`
        WHERE `job_phase_id` in
        <foreach collection="jobPhaseIdList" item="phaseId" open="(" close=")" separator=",">
            #{phaseId}
        </foreach>
        and `is_executed` = 0
    </delete>
    <delete id="deleteJobPhaseRunnerByJobId">
        DELETE
        FROM `autoexec_job_phase_runner`
        WHERE `job_id` = #{value}
    </delete>
    <delete id="deleteJobPhaseNodeRunnerByJobId">
        DELETE ajpnr
        FROM `autoexec_job_phase_node_runner` ajpnr
                 LEFT JOIN `autoexec_job_phase_node` ajpn ON ajpnr.`node_id` = ajpn.`id`
        WHERE ajpn.`job_id` = #{value}
          and ajpn.`is_executed` = 0
    </delete>
    <delete id="deleteJobPhaseNodeByJobPhaseIdAndLcd">
        DELETE
        FROM `autoexec_job_phase_node`
        where `job_phase_id` = #{jobPhaseId}
          and (`lcd` != #{lcd} OR `lcd` IS NULL)
          and `is_executed` = 0
    </delete>
    <delete id="deleteJobPhaseNodeByJobPhaseIdAndLcdAndStatus">
        DELETE
        FROM `autoexec_job_phase_node`
        where `job_phase_id` = #{jobPhaseId}
          and (`lcd` != #{lcd} OR `lcd` IS NULL)
          and `status` = #{status}
          and `is_delete` = 0
          and `is_executed` = 0
    </delete>
    <delete id="deleteJobPhaseNodeRunnerByJobPhaseIdAndLcdAndStatus">
        DELETE ajpnr
        FROM `autoexec_job_phase_node_runner` ajpnr
                 LEFT JOIN `autoexec_job_phase_node` ajpn ON ajpnr.`node_id` = ajpn.`id`
        WHERE ajpn.`job_phase_id` = #{jobPhaseId}
          and (ajpn.`lcd` != #{lcd} OR ajpn.`lcd` IS NULL)
          and ajpn.`status` = #{status}
          and ajpn.`is_executed` = 0
    </delete>
    <delete id="deleteJobEvnByJobId">
        DELETE
        FROM `autoexec_job_env`
        WHERE `job_id` = #{value}
    </delete>
    <delete id="deleteJobInvokeByJobId">
        DELETE
        FROM `autoexec_job_invoke`
        WHERE `job_id` = #{value}
    </delete>
    <delete id="deleteJobResourceInspectByJobId">
        DELETE
        FROM `autoexec_job_resource_inspect`
        WHERE `job_id` = #{value}
    </delete>
    <delete id="deleteJobPhaseRunnerByJobPhaseIdAndRunnerMapId">
        DELETE
        FROM `autoexec_job_phase_runner`
        where `job_phase_id` = #{jobPhaseId}
          and `runner_map_id` = #{runnerMapId}
    </delete>
    <delete id="deleteJobGroupByJobId">
        DELETE
        FROM `autoexec_job_group`
        WHERE `job_id` = #{value}
    </delete>
    <delete id="deleteJobSqlDetailByJobId">
        DELETE
        FROM `autoexec_job_sql_detail`
        WHERE `job_id` = #{value}
    </delete>
</mapper>

