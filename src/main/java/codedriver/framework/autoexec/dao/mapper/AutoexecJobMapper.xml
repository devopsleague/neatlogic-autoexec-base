<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright(c) 2022 TechSure Co., Ltd. All Rights Reserved.
  ~ 本内容仅限于深圳市赞悦科技有限公司内部传阅，禁止外泄以及用于其他的商业项目。
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.autoexec.dao.mapper.AutoexecJobMapper">
    <select id="searchJobId" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo"
            resultType="java.lang.Long">
        SELECT
        distinct aj.`id`
        FROM
        `autoexec_job` aj
        <if test="(typeIdList != null and typeIdList.size() > 0) or (combopName != null and combopName != '' )">
            LEFT JOIN `autoexec_combop` ac ON aj.`operation_id` = ac.`id`
        </if>
        <if test="invokeIdList != null and invokeIdList.size() > 0">
            JOIN `autoexec_job_invoke` aji ON aj.`id` = aji.`job_id` AND
            aji.`invoke_id` in
            <foreach collection="invokeIdList" open="(" item="invokeId" close=")" separator=",">
                #{invokeId}
            </foreach>
        </if>
        <where>
            <include refid="searchJobSql"/>
        </where>
        order by aj.`id` desc
        limit #{startNum}, #{pageSize}
    </select>

    <select id="searchJob"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT
        aj.`id`,
        aj.`name`,
        aj.`status`,
        aj.`error_msg` as errorMsg,
        aj.`plan_start_time` as planStartTime,
        aj.`start_time` as startTime,
        aj.`end_time` as endTime,
        aj.`operation_id` as operationId,
        aj.`operation_type` as operationType,
        aj.`exec_user` as execUser,
        aj.`exec_user_type` as execUserType,
        aj.`source`,
        aj.`thread_count` as threadCount,
        aj.`trigger_type` as triggerType
        FROM
        `autoexec_job` aj
        WHERE aj.`id` in
        <foreach collection="jobIdList" item="jobId" open="(" close=")" separator=",">
            #{jobId}
        </foreach>
        order by aj.`id` desc
    </select>

    <select id="searchJobCount" resultType="java.lang.Integer"
            parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT
        count(distinct aj.`id`)
        FROM
        `autoexec_job` aj
        <if test="(typeIdList != null and typeIdList.size() > 0) or (combopName != null and combopName != '') ">
            LEFT JOIN `autoexec_combop` ac ON aj.`operation_id` = ac.`id`
        </if>
        <if test="invokeIdList != null and invokeIdList.size() > 0">
            JOIN `autoexec_job_invoke` aji ON aj.`id` = aji.`job_id` AND
            aji.`invoke_id` in
            <foreach collection="invokeIdList" open="(" item="invokeId" close=")" separator=",">
                #{invokeId}
            </foreach>
        </if>
        <where>
            <include refid="searchJobSql"/>
        </where>
    </select>

    <select id="searchJobWithCombopView" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo"
            resultType="codedriver.framework.autoexec.dto.combop.AutoexecCombopVo">
        SELECT ac.`name`, ac.`uk`, COUNT(1) as referenceCount
        FROM `autoexec_job` aj
        LEFT JOIN `autoexec_combop` ac ON aj.`operation_id` = ac.`id`
        <where>
            <include refid="searchJobSql"/>
        </where>
        GROUP BY ac.id
        order by ac.`uk` desc
        limit #{startNum}, #{pageSize}
    </select>

    <sql id="searchJobSql">
        <if test="combopName != null and combopName != ''">
            ac.name like concat('%', #{combopName}, '%')
        </if>
        <if test="keyword != null and keyword != ''">
            and (aj.name like concat('%', #{keyword}, '%') OR aj.id like concat('%', #{keyword}, '%'))
        </if>
        <if test="operationId != null">
            and aj.operation_id = #{operationId}
        </if>
        <if test="statusList != null and statusList.size() > 0 ">
            and aj.`status` in
            <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>
        </if>
        <if test="sourceList != null and sourceList.size() > 0 ">
            and aj.`source` in
            <foreach collection="sourceList" item="source" open="(" close=")" separator=",">
                #{source}
            </foreach>
        </if>
        <if test="typeIdList != null and typeIdList.size() > 0 ">
            and ac.`type_id` in
            <foreach collection="typeIdList" item="typeId" open="(" close=")"
                     separator=",">
                #{typeId}
            </foreach>
        </if>
        <if test="execUserList != null and execUserList.size() > 0 ">
            and aj.`exec_user` in
            <foreach collection="execUserList" item="execUser" open="(" close=")" separator=",">
                #{execUser}
            </foreach>
        </if>
        <if test="idList != null and idList.size() > 0">
            and aj.`id` in
            <foreach collection="idList" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="startTime != null">
            and aj.start_time &gt;= #{startTime}
        </if>
        <if test="endTime != null ">
            and aj.start_time &lt;= #{endTime}
        </if>
    </sql>

    <sql id="searchJobPhaseNodeSql">
        <if test="jobId != null">
            ajp.`job_id` = #{jobId}
        </if>
        <if test="jobPhaseName != null and jobPhaseName != ''">
            and ajp.`name` = #{jobPhaseName}
        </if>
        <if test="jobPhaseId != null">
            and ajpn.`job_phase_id` = #{jobPhaseId}
        </if>
        <if test="statusList != null and statusList.size() > 0 ">
            and ajpn.`status` in
            <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>
        </if>
        <if test="nodeIdList != null and nodeIdList.size() > 0 ">
            and ajpn.`id` in
            <foreach collection="nodeIdList" item="nodeId" open="(" close=")" separator=",">
                #{nodeId}
            </foreach>
        </if>
        <if test="statusBlackList != null and statusBlackList.size() > 0 ">
            and ajpn.`status` not in
            <foreach collection="statusBlackList" item="statusBlack" open="(" close=")" separator=",">
                #{statusBlack}
            </foreach>
        </if>
        <if test="keyword != null and keyword != ''">
            and (ajpn.`name` like concat('%',#{keyword},'%') or ajpn.`host` like concat('%',#{keyword},'%'))
        </if>
        <if test="runnerMapId != null">
            and arm.id = #{runnerMapId}
        </if>
        <if test="isDelete != null">
            and ajpn.`is_delete` = #{isDelete}
        </if>
        <if test="nodeFrom != null and nodeFrom != ''">
            and ajp.`node_from` = #{nodeFrom}
        </if>
        <if test="groupSort != null">
            and ajg.`sort` = #{groupSort}
        </if>
    </sql>

    <select id="searchJobPhaseNodeWithResource"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        ajpn.`id`,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        ajpn.`protocol_id` as protocolId,
        ajpn.`resource_id` AS resourceId,
        ajpn.`warn_count` as warnCount,
        ri.`id` AS nodeId,
        ajpn.name AS nodeName,
        ajpn.type AS nodeType,
        ajpn.is_delete as isDelete,
        arm.`runner_id` AS runnerId,
        arm.id as runnerMapId,
        ajpn.`user_name` AS userName,
        ap.`host` as runnerHost,
        ap.`port` as runnerPort,
        ap.`url` AS runnerUrl
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        LEFT JOIN ${schemaName}.`resource_ipobject` ri ON ajpn.resource_id = ri.`id`
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ap ON arm.`runner_id` = ap.`id`
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
        order by ajpn.`host`,ajpn.`port`
        limit #{startNum}, #{pageSize}
    </select>

    <select id="searchJobPhaseNode" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        distinct
        ajpn.`id`,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        ajpn.`protocol_id` as protocolId,
        ajpn.`resource_id` AS resourceId,
        ajpn.name AS nodeName,
        ajpn.type AS nodeType,
        ajpn.is_delete as isDelete,
        ajpn.`user_name` AS userName
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
        order by ajpn.`host`,ajpn.`port`
        limit #{startNum}, #{pageSize}
    </select>

    <select id="getJobPhaseNodeRunnerMapIdListByNodeVo" resultType="java.lang.Long">
        SELECT
        distinct
        arm.id
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ap ON arm.`runner_id` = ap.`id`
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
    </select>

    <select id="getJobPhaseNodeIdListByNodeVoAndStartNum"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        ajpn.`id`,
        ajpn.`status`
        FROM
        `autoexec_job_phase_node` ajpn
        JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        where
        ajp.`job_id` = #{nodeVo.jobId}
        <if test="nodeVo.jobPhaseName != null and nodeVo.jobPhaseName != ''">
            and ajp.`name` = #{nodeVo.jobPhaseName}
        </if>
        <if test="nodeVo.isDelete != null">
            and ajpn.`is_delete` = #{nodeVo.isDelete}
        </if>
        <if test="nodeVo.statusList != null and nodeVo.statusList.size() > 0 ">
            and ajpn.`status` in
            <foreach collection="nodeVo.statusList" item="status" open="(" close=")" separator=",">
                #{status}
            </foreach>
        </if>
        <if test="nodeVo.statusBlackList != null and nodeVo.statusBlackList.size() > 0 ">
            and ajpn.`status` not in
            <foreach collection="nodeVo.statusBlackList" item="statusBlack" open="(" close=")" separator=",">
                #{statusBlack}
            </foreach>
        </if>
        order by ajpn.`host`,ajpn.`port`
        limit #{startNum}, #{nodeVo.pageSize}
    </select>

    <select id="searchJobPhaseNodeCountWithResource" resultType="java.lang.Integer">
        SELECT
        count(ajpn.`id`)
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp on ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN ${schemaName}.`resource_ipobject` ri ON ajpn.resource_id = ri.`id`
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
    </select>

    <select id="searchJobPhaseNodeCount" resultType="java.lang.Integer">
        SELECT
        count(distinct ajpn.`id`)
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp on ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
    </select>

    <select id="getJobPhaseListByJobId" parameterType="java.lang.Long"
            resultMap="AutoexecJobPhaseMap">
        SELECT ajp.`id`,
               ajp.`job_id`         as jobId,
               ajp.`status`,
               ajp.`start_time`     as startTime,
               ajp.`end_time`       as endTime,
               ajp.`exec_user`      as execUser,
               ajp.`exec_mode`      as execMode,
               ajp.`name`           as name,
               ajp.`error_msg`      as errorMsg,
               ajp.`group_id`       as groupId,
               ajp.`execute_policy` as executePolicy,
               ajp.`sort`,
               ajp.`warn_count`     as warnCount,
               ajp.`uk`             as uk,
               ajg.id               as groupId,
               ajg.sort             as groupSort,
               ajg.config,
               ajg.policy           as groupPolicy
        FROM `autoexec_job_phase` ajp
                 left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        where ajp.`job_id` = #{value}
        ORDER BY ajg.`sort`, ajp.`sort`, ajp.`name`
    </select>

    <resultMap id="AutoexecJobPhaseMap" type="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        <id column="id" property="id"/>
        <result column="jobId" property="jobId"/>
        <result column="status" property="status"/>
        <result column="startTime" property="startTime"/>
        <result column="endTime" property="endTime"/>
        <result column="execUser" property="execUser"/>
        <result column="execMode" property="execMode"/>
        <result column="executePolicy" property="executePolicy"/>
        <result column="name" property="name"/>
        <result column="groupId" property="groupId"/>
        <result column="sort" property="sort"/>
        <result column="uk" property="uk"/>
        <collection property="jobGroupVo" ofType="codedriver.framework.autoexec.dto.job.AutoexecJobGroupVo">
            <result column="groupId" property="id"/>
            <result column="groupSort" property="sort"/>
            <result column="groupPolicy" property="policy"/>
            <result column="config" property="configStr"/>
        </collection>
    </resultMap>

    <select id="getJobPhaseListByJobIdAndPhaseStatus" resultMap="AutoexecJobPhaseMap">
        SELECT ajp.`id`,
        ajp.`job_id` as jobId,
        ajp.`status`,
        ajp.`start_time` as startTime,
        ajp.`end_time` as endTime,
        ajp.`exec_user` as execUser,
        ajp.`exec_mode` as execMode,
        ajp.`name` as name,
        ajp.`sort`,
        ajp.`uk` as uk,
        ajg.id as groupId,
        ajg.sort as groupSort,
        ajg.config,
        ajg.policy as groupPolicy
        FROM `autoexec_job_phase` ajp
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        where ajp.`job_id` = #{jobId}
        <if test="statusList != null and statusList.size() >0">
            and ajp.`status` in
            <foreach collection="statusList" item="status" separator="," open="(" close=")">
                #{status}
            </foreach>
        </if>
        ORDER BY ajg.sort,`sort`, `name` ASC
    </select>

    <select id="getJobPhaseListByJobIdAndNodeStatusList" resultMap="AutoexecJobPhaseMap">
        SELECT ajp.`id`,
        ajp.`job_id` AS jobId,
        ajp.`status`,
        ajp.`start_time` AS startTime,
        ajp.`end_time` AS endTime,
        ajp.`exec_user` AS execUser,
        ajp.`exec_mode` AS execMode,
        ajp.`name` AS NAME,
        ajp.`sort`,
        ajp.`uk` AS uk,
        ajg.id as groupId,
        ajg.sort as groupSort,
        ajg.policy as groupPolicy
        FROM `autoexec_job_phase_node` ajpn
        JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        WHERE ajpn.job_id = #{jobId} AND ajpn.`status` in
        <foreach collection="statusList" open="(" separator="," close=")" item="status">
            #{status}
        </foreach>
        ORDER BY ajg.`sort`,ajp.sort,ajp.`name`
    </select>

    <select id="getJobPhaseNodeStatusCount" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeStatusCountVo">
        SELECT `job_phase_id` as jobPhaseId, `status`, COUNT(1) AS `count`
        FROM `autoexec_job_phase_node`
        WHERE `job_id` = #{value}
        GROUP BY `job_phase_id`, `status`
    </select>

    <select id="getJobInfo" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`error_msg`       as errorMsg,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`exec_user_type`  as execUserType,
               aj.`source`,
               aj.`thread_count`    as threadCount,
               aj.`param_hash`      as paramHash,
               aj.`config_hash`          as configHash,
               aj.`lncd`,
               aj.`trigger_type`    as triggerType
        FROM `autoexec_job` aj
        WHERE aj.`id` = #{value}
    </select>

    <select id="checkIsJobUser" resultType="java.lang.Integer">
        select count(1)
        from `autoexec_job`
        where `id` = #{jobId}
        and `exec_user` in
        <foreach collection="userList" item="user" open="(" close=")" separator=",">
            #{user}
        </foreach>
    </select>

    <select id="getJobPhaseLockByPhaseId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT id,
               job_id as jobId,
               `status`
        FROM `autoexec_job_phase`
        WHERE id = #{value} FOR
        UPDATE
    </select>

    <select id="getFirstJobPhase" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        select id, job_id as jobId, `name`
        from `autoexec_job_phase`
        where job_id = #{value}
        order by `sort` asc
        limit 1
    </select>

    <resultMap id="jobMap" type="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="paramStr" property="paramArrayStr"/>
        <collection property="phaseList" ofType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
            <id column="phaseId" property="id"/>
            <result column="phaseName" property="name"/>
            <result column="lncd" property="lncd"/>
            <result column="lcd" property="lcd"/>
            <result column="phaseUk" property="uk"/>
            <collection property="operationList"
                        ofType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
                <id column="operationId" property="id"/>
                <result column="operationUk" property="uk"/>
                <result column="operationName" property="name"/>
                <result column="operationType" property="type"/>
                <result column="parser" property="parser"/>
                <result column="execMode" property="execMode"/>
                <result column="failPolicy" property="failPolicy"/>
                <result column="operationParam" property="paramStr"/>
            </collection>
        </collection>
    </resultMap>

    <select id="getJobDetailByJobIdAndPhaseName" resultMap="jobMap">
        SELECT aj.`id`,
               aj.`name`,
               ajpc.`content`     AS paramStr,
               ajp.`id`           AS phaseId,
               ajp.`name`         AS phaseName,
               ajp.`uk`           AS phaseUk,
               ajp.`lncd`,
               ajp.`lcd`,
               ajpo.`id`          AS operationId,
               ajpo.`uk`          AS operationUk,
               ajpo.`name`        AS operationName,
               ajpo.type          AS operationType,
               ajpo.parser,
               ajpo.`exec_mode`   AS execMode,
               ajpo.`fail_policy` AS failPolicy,
               ajpc1.`content`    AS operationParam
        FROM `autoexec_job` aj
                 LEFT JOIN `autoexec_job_content` ajpc ON aj.`param_hash` = ajpc.`hash`
                 LEFT JOIN `autoexec_job_phase` ajp ON aj.`id` = ajp.`job_id`
                 LEFT JOIN `autoexec_job_phase_operation` ajpo ON ajp.`id` = ajpo.`job_phase_id`
                 LEFT JOIN `autoexec_job_content` ajpc1 ON ajpo.`param_hash` = ajpc1.`hash`
        where aj.`id` = #{jobId}
          and ajp.`name` = #{phaseName}

    </select>

    <select id="getJobLockByJobId" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`error_msg`       as errorMsg,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`source`,
               aj.`thread_count`    as threadCount,
               aj.`param_hash`      as paramHash,
               aj.`config_hash`          as configHash,
               aj.`trigger_type`    as triggerType
        FROM `autoexec_job` aj
        WHERE aj.`id` = #{value} for
        update
    </select>

    <select id="getJobIdListByStatusAndTriggerType" parameterType="java.lang.String" resultType="java.lang.Long">
        SELECT aj.`id`
        FROM `autoexec_job` aj
        WHERE aj.`status` = #{status}
          AND aj.`trigger_type` = #{triggerType}
    </select>

    <select id="getJobContentLock"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobContentVo">
        SELECT `hash`,
               `content`
        FROM `autoexec_job_content`
        where `hash` = #{value} for
        update
    </select>

    <select id="getJobContent"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobContentVo">
        SELECT `hash`,
               `content`
        FROM `autoexec_job_content`
        where `hash` = #{value}
    </select>

    <select id="getJobPhaseOperationByJobId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT `job_id`       as jobId,
               `job_phase_id` as jobPhaseId,
               `id`,
               `name`,
               `uk`,
               `type`,
               `parser`,
               `exec_mode`    as execMode,
               `fail_policy`  as failPolicy,
               `param_hash`   as paramHash
        FROM `autoexec_job_phase_operation`
        where `job_id` = #{value}
    </select>

    <select id="getJobPhaseOperationByJobIdAndPhaseId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT `job_id`       as jobId,
               `job_phase_id` as jobPhaseId,
               `id`,
               `name`,
               `uk`,
               `type`,
               `parser`,
               `exec_mode`    as execMode,
               `sort`,
               `fail_policy`  as failPolicy,
               version_id     as versionId,
               `param_hash`   as paramHash,
               `profile_id`   as profileId
        FROM `autoexec_job_phase_operation`
        where `job_id` = #{jobId}
          and `job_phase_id` = #{phaseId}
          and `parent_operation_id` is null
    </select>

    <select id="checkIsJobParamReference" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `autoexec_job` aj
        WHERE aj.id != #{jobId}
          AND aj.`param_hash` = #{hash}
    </select>

    <select id="checkIsJobPhaseOperationParamReference" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `autoexec_job_phase_operation`
        WHERE job_id != #{jobId}
          AND `param_hash` = #{hash}
    </select>

    <select id="checkIsJobPhaseNodeExist" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo"
            resultType="java.lang.Integer">
        select count(1)
        from `autoexec_job_phase_node`
        where `job_id` = #{jobId}
          and `job_phase_id` = #{jobPhaseId}
          and `host` = #{host}
          and port = #{port}
    </select>

    <select id="getJobPhaseByJobIdAndPhaseName"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT id,
               `name`,
               job_id     as jobId,
               exec_mode  as execMode,
               `group_id` as groupId,
               `sort`,
               `status`
        FROM `autoexec_job_phase`
        WHERE `job_id` = #{jobId}
          and `name` = #{jobPhaseName}
    </select>
    <select id="getJobPhaseOperationByJobIdAndPhaseIdAndOperationId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT `job_id`       as jobId,
               `job_phase_id` as jobPhaseId,
               `id`,
               `name`,
               `uk`,
               `type`,
               `parser`,
               `exec_mode`    as execMode,
               `fail_policy`  as failPolicy,
               `param_hash`   as paramHash
        FROM `autoexec_job_phase_operation`
        where `job_id` = #{jobId}
          and `job_phase_id` = #{jobPhaseId}
          and `id` = #{jobPhaseOperationId}
    </select>

    <select id="getJobPhaseOperationByOperationId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        SELECT `job_id`       as jobId,
               `job_phase_id` as jobPhaseId,
               `id`,
               `name`,
               `uk`,
               `type`,
               `parser`,
               `exec_mode`    as execMode,
               `fail_policy`  as failPolicy,
               `param_hash`   as paramHash,
               `version_id`   as versionId
        FROM `autoexec_job_phase_operation`
        where `id` = #{jobPhaseOperationId}
    </select>

    <select id="getJobPhaseNotCompletedCountByJobIdAndGroupSort" resultType="java.lang.Integer">
        select count(1)
        from `autoexec_job_phase` ajp
                 left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        where ajp.`job_id` = #{jobId}
          and ajg.`sort` = #{groupSort}
          and `status` != 'completed'
    </select>

    <select id="getNextJobPhaseSortByJobId" resultType="java.lang.Integer">
        SELECT sort
        FROM `autoexec_job_phase`
        WHERE job_id = #{jobId}
          AND `sort` > #{sort}
          and `status` in ('pending', 'running')
        ORDER BY `sort` ASC
        LIMIT 1
    </select>

    <select id="checkIsHasActivePhaseFailed" resultType="java.lang.Integer">
        select count(1)
        from `autoexec_job_phase`
        where `job_id` = #{value}
          AND `status` = 'failed'
    </select>
    <select id="getJobPhaseListByJobIdAndGroupSort"
            resultMap="AutoexecJobPhaseMap">
        select
        ajp.`job_id` as jobId,
        ajp.`name`,
        ajp.`exec_mode` as execMode,
        ajp.`id`, ajp.`status`,
        ajp.`execute_policy` as executePolicy,
        ajp.`status`,
        ajg.id as groupId,
        ajg.sort as groupSort,
        ajg.config,
        ajg.policy as groupPolicy
        from `autoexec_job_phase` ajp
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        where ajp.`job_id` = #{jobId}
        <if test="sort != null">
            and ajg.`sort` = #{sort}
        </if>
    </select>
    <select id="getJobPhaseNodeInfoByJobNodeId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
               ajpn.`job_id`       AS jobId,
               ajpn.`job_phase_id` AS jobPhaseId,
               ajpn.`host`,
               ajpn.port,
               ajpn.`start_time`   AS startTime,
               ajpn.`end_time`     AS endTime,
               ajpn.`status`,
               ajp.`name`          AS jobPhaseName,
               ajpn.`name`         AS nodeName,
               ajpn.`user_name`    as userName,
               ajpn.`protocol_id`  AS protocolId,
               ajpn.`resource_id`  as resourceId,
               ap.`id`             AS runnerId,
               ap.`url`            AS runnerUrl
        FROM `autoexec_job_phase_node` ajpn
                 LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
                 LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
                 LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
                 LEFT JOIN `runner` ap ON arm.`runner_id` = ap.`id`
        where ajpn.`id` = #{nodeId}
    </select>

    <select id="getJobPhaseRunnerNodeByJobIdAndPhaseId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
               ajpn.`job_id`       as jobId,
               ajpn.`job_phase_id` as jobPhaseId,
               ajpn.`host`,
               ajpn.`port`,
               ajpn.`user_name`    as userName,
               ajpn.`start_time`   as startTime,
               ajpn.`end_time`     as endTime,
               ajpn.`status`,
               arm.`runner_id`     as runnerId
        FROM `autoexec_job_phase_node` ajpn
                 LEFT JOIN `autoexec_job_phase_node_runner` ajpnr on ajpn.id = ajpnr.`node_id`
                 LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        WHERE ajpn.`job_id` = #{jobId}
          AND ajpn.`job_phase_id` = #{phaseId}
    </select>
    <select id="getJobPhaseByJobIdAndPhaseId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT id,
               job_id      as jobId,
               `name`,
               `exec_mode` as execMode,
               `sort`,
               `status`
        FROM `autoexec_job_phase`
        WHERE `job_id` = #{jobId}
          and `id` = #{jobPhaseId}
    </select>
    <select id="getJobPhaseNodeListByJobIdAndPhaseNameAndExceptStatusAndRunnerId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        arm.`runner_id` AS runnerId,
        ajp.`name` AS jobPhaseName
        FROM `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        where ajpn.`job_id` = #{jobId} and ajp.`name` = #{phaseName} and arm.`runner_id` = #{runnerId} and
        ajpn.`status` not in
        <foreach collection="exceptStatus" item="status" separator="," open="(" close=")">
            #{status}
        </foreach>
    </select>

    <select id="getJobPhaseNodeListByJobIdAndPhaseIdAndExceptStatus"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_id` = #{jobId} and ajpn.`job_phase_id` = #{phaseId} and
        ajpn.`status` not in
        <foreach collection="exceptStatus" item="status" separator="," open="(" close=")">
            #{status}
        </foreach>
    </select>

    <select id="getJobPhaseNodeListByJobIdAndPhaseId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
               ajpn.`job_id`       AS jobId,
               ajpn.`job_phase_id` AS jobPhaseId,
               ajpn.`host`,
               ajpn.`port`,
               ajpn.`start_time`   AS startTime,
               ajpn.`end_time`     AS endTime,
               ajpn.`resource_id`  as resourceId,
               ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_id` = #{jobId}
          and ajpn.`job_phase_id` = #{phaseId}
    </select>

    <select id="getJobRunnerListByJobId" resultType="codedriver.framework.dto.runner.RunnerVo">
        SELECT DISTINCT ar.`id`, ar.`name`, ar.`url`, ar.`host`, ar.`port`
        FROM `autoexec_job_phase_node` ajpn
                 LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
                 LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
                 LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpn.`job_id` = #{value}
    </select>

    <select id="getJobPhaseRunnerMapByJobIdAndPhaseIdList" resultType="codedriver.framework.dto.runner.RunnerMapVo">
        SELECT DISTINCT ar.`id`,
        ar.`name`,
        ar.`url`,
        ar.`host`,
        ar.`port`,
        ajpr.runner_map_id as runnerMapId
        FROM `autoexec_job_phase_runner` ajpr
        LEFT JOIN `runner_map` arm ON ajpr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpr.`job_id` = #{jobId}
        <if test="jobPhaseIdList != null and jobPhaseIdList.size() > 0">
            and ajpr.`job_phase_id` in
            <foreach collection="jobPhaseIdList" item="jobPhaseId" close=")" open="(" separator=",">
                #{jobPhaseId}
            </foreach>
        </if>
    </select>
    <select id="checkIsHasRunningNode" resultType="java.lang.Integer">
        select count(1)
        from `autoexec_job_phase_node`
        WHERE `job_id` = #{value}
          and `status` = 'running'
    </select>
    <select id="getJobContentList"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobContentVo">
        SELECT `hash`,
        `content`
        FROM `autoexec_job_content`
        where `hash` in
        <foreach collection="hashList" separator="," open="(" close=")" item="hash">
            #{hash}
        </foreach>
    </select>

    <select id="getJobPhaseRunnerCountByPhaseIdListAndRunnerNotStatus" resultType="java.lang.Integer">
        SELECT
        COUNT(1)
        FROM
        `autoexec_job_phase_runner`
        WHERE `job_phase_id` in
        <foreach collection="jobPhaseIdList" separator="," open="(" close=")" item="jobPhaseId">
            #{jobPhaseId}
        </foreach>
        and `status` != #{status}
    </select>
    <select id="getJobPhaseRunnerCountByJobIdAndRunnerStatus" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `autoexec_job_phase_runner`
        WHERE `job_id` = #{jobId}
          and `status` = #{status}
    </select>
    <select id="getJobPhaseByJobIdAndRunnerStatus"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT ajpr.job_phase_id,
               COUNT(1) as `count`
        FROM `autoexec_job_phase_runner` ajpr
                 LEFT JOIN `autoexec_job_phase` ajp ON ajpr.`job_phase_id` = ajp.`id`
        WHERE ajp.`job_id` = #{jobId}
          AND ajpr.`status` = #{status}
        GROUP BY ajpr.job_phase_id
    </select>
    <select id="getJobPhaseRunnerByPhaseListAndStatusCount" resultType="java.lang.Integer">
        SELECT
        COUNT(1)
        FROM
        `autoexec_job_phase_runner`
        WHERE `job_phase_id` in
        <foreach collection="jobPhaseIdList" separator="," open="(" close=")" item="jobPhaseId">
            #{jobPhaseId}
        </foreach>
        and `status` = #{status}
    </select>
    <select id="getJobPhaseByJobIdAndPhaseStatus"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT `id`,
               `job_id`     as jobId,
               `status`,
               `start_time` as startTime,
               `end_time`   as endTime,
               `exec_user`  as execUser,
               `exec_mode`  as execMode,
               `name`       as name,
               `error_msg`  as errorMsg,
               `sort`,
               `uk`         as uk
        FROM `autoexec_job_phase`
        where `job_id` = #{jobId}
          and `status` = #{status}
        order by `sort`, `name` asc
        limit 1
    </select>
    <select id="getJobActivePhase" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT `name`
        FROM `autoexec_job_phase`
        WHERE job_id = #{value}
        ORDER BY CASE
                     WHEN `status` = 'running' THEN 1
                     WHEN `status` = 'failed' THEN 2
                     ELSE 3 END ASC,
                 sort ASC, id ASC
        LIMIT 1
    </select>
    <select id="getJobPhaseNodeListByNodeIdList"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`resource_id` AS resourceId,
        ajpn.`user_name` as userName,
        ajpn.`name` as nodeName,
        ajpn.`type` as nodeType,
        ajpn.`protocol_id` as protocolId,
        ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`id` in
        <foreach collection="nodeIdList" item="nodeId" separator="," open="(" close=")">
            #{nodeId}
        </foreach>
    </select>

    <select id="getJobPhaseNodeListByJobPhaseIdAndResourceIdList"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`resource_id` AS resourceId,
        ajpn.`user_name` as userName,
        ajpn.`name` as nodeName,
        ajpn.`type` as nodeType,
        ajpn.`protocol_id` as protocolId,
        ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_phase_id` = #{jobPhaseId} and ajpn.`resource_id` in
        <foreach collection="resourceIdList" item="resourceId" separator="," open="(" close=")">
            #{resourceId}
        </foreach>
    </select>

    <select id="getJobPhaseNodeListByJobPhaseIdAndResourceIdListAndIsDelete"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`resource_id` AS resourceId,
        ajpn.`user_name` as userName,
        ajpn.`name` as nodeName,
        ajpn.`type` as nodeType,
        ajpn.`protocol_id` as protocolId,
        ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_phase_id` = #{jobPhaseId} and ajpn.`resource_id` in
        <foreach collection="resourceIdList" item="resourceId" separator="," open="(" close=")">
            #{resourceId}
        </foreach>
        and ajpn.is_delete = 1
    </select>

    <select id="getJobPhaseNodeRunnerListByNodeIdList"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`resource_id` AS resourceId,
        ajpn.`user_name` as userName,
        ajpn.`name` as nodeName,
        ajpn.`type` as nodeType,
        ajpn.`protocol_id` as protocolId,
        ajpn.`status`,
        ajpnr.runner_map_id as runnerMapId,
        r.url as runnerUrl
        FROM `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpnr.`node_id` = ajpn.`id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` r on arm.runner_id = r.id
        where ajpn.`id` in
        <foreach collection="nodeIdList" item="nodeId" separator="," open="(" close=")">
            #{nodeId}
        </foreach>
    </select>
    <select id="getJobRunnerById" resultType="codedriver.framework.dto.runner.RunnerVo">
        SELECT ar.`id`, ar.`name`, ar.`url`, ar.`host`, ar.`port`
        FROM `runner` ar
        WHERE ar.`id` = #{value}
    </select>
    <select id="getJobPhaseNodeListByJobIdAndNodeStatusList"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
        where ajpn.`job_id` = #{jobId} and ajpn.`status` in
        <foreach collection="statusList" item="status" separator="," open="(" close=")">
            #{status}
        </foreach>
    </select>
    <select id="getJobPhaseByPhaseId" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT id,
               job_id      as jobId,
               `name`,
               `exec_mode` as execMode,
               `sort`,
               `group_id`  as groupId,
               `status`
        FROM `autoexec_job_phase`
        WHERE id = #{value}
    </select>
    <select id="getJobLockByOperationId" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`error_msg`       as errorMsg,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`source`,
               aj.`thread_count`    as threadCount,
               aj.`param_hash`      as paramHash,
               aj.`config_hash`          as configHash
        FROM `autoexec_job` aj
        WHERE aj.`operation_id` = #{value} for
        update
    </select>
    <select id="getJobPhaseNodeInfoByJobPhaseIdAndResourceId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.port,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        ajp.`name` AS jobPhaseName,
        ajpn.`name` AS nodeName,
        ajpn.`user_name` as userName,
        ajpn.`protocol_id` AS protocolId,
        ajpn.`resource_id` as resourceId,
        ap.`id` AS runnerId,
        ap.`url` AS runnerUrl
        FROM `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ap ON arm.`runner_id` = ap.`id`
        where ajpn.`job_phase_id` = #{jobPhaseId}
        <if test="resourceId == null">
            and ajpn.`resource_id` is null
        </if>
        <if test="resourceId != null">
            and ajpn.`resource_id` = #{resourceId}
        </if>

    </select>

    <select id="getJobPhaseNodeInfoByJobIdAndJobPhaseNameAndResourceId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.port,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        ajp.`name` AS jobPhaseName,
        ajpn.`name` AS nodeName,
        ajpn.`user_name` as userName,
        ajpn.`protocol_id` AS protocolId,
        ajpn.`resource_id` as resourceId,
        ap.`id` AS runnerId,
        ap.`url` AS runnerUrl
        FROM `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ap ON arm.`runner_id` = ap.`id`
        where ajpn.job_id = #{jobId} and ajp.`name` = #{jobPhaseName}
        <if test="resourceId == null">
            and ajpn.`resource_id` is null
        </if>
        <if test="resourceId != null">
            and ajpn.`resource_id` = #{resourceId}
        </if>

    </select>

    <select id="getJobInvokeByJobId" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobInvokeVo">
        SELECT `job_id`    as jobId,
               `invoke_id` as invokeId,
               `source`
        FROM `autoexec_job_invoke`
        where `job_id` = #{value}
    </select>

    <select id="getJobIdByInvokeIdLimitOne" parameterType="java.lang.Long" resultType="java.lang.Long">
        SELECT `job_id`
        FROM `autoexec_job_invoke`
        WHERE `invoke_id` = #{value}
        LIMIT 1
    </select>

    <select id="getJobIdCountListByInvokeIdList" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobInvokeVo">
        SELECT
        `invoke_id` AS invokeId,
        COUNT(1) AS count
        FROM `autoexec_job_invoke`
        WHERE `invoke_id` in
        <foreach collection="list" item="invokeId" open="(" separator="," close=")">
            #{invokeId}
        </foreach>
        GROUP BY `invoke_id`
    </select>

    <select id="getAutoexecJobEnvValueByJobIdAndName"
            parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobEnvVo" resultType="java.lang.String">
        SELECT `value`
        FROM `autoexec_job_env`
        WHERE `job_id` = #{jobId}
          AND `name` = #{name}
    </select>

    <select id="getAutoexecJobEnvListByJobId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobEnvVo">
        SELECT `job_id` AS jobId,
               `name`,
               `value`
        FROM `autoexec_job_env`
        WHERE `job_id` = #{value}
    </select>
    <select id="getJobPhaseRunnerNotCompletedCountByJobIdAndIsFireNextAndGroupSort" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM `autoexec_job_phase_runner` ajpr
                 JOIN autoexec_job_phase ajp ON ajpr.job_id = ajp.job_id AND ajpr.job_phase_id = ajp.id
                 JOIN autoexec_job_group ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        WHERE ajg.sort = #{groupSort}
          AND ajpr.job_id = #{jobId}
          AND (ajpr.status != 'completed' OR ajpr.is_fire_next = #{isFireNext})
    </select>

    <select id="getJobPhaseRunnerAbortingCountMapCountByJobId" resultType="java.util.HashMap">
        SELECT ajpr.`job_phase_id`, COUNT(1) as `count`
        FROM `autoexec_job_phase_runner` ajpr
                 JOIN autoexec_job_phase ajp ON ajpr.job_id = ajp.job_id AND ajpr.job_phase_id = ajp.id
        WHERE ajpr.`job_id` = #{jobId}
          AND ajpr.status = 'aborting'
        GROUP BY ajpr.`job_phase_id`
    </select>
    <select id="getAutoexecJobNodeListByJobPhaseIdListAndStatusAndRunnerId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        ajpn.id,
        ajpn.`job_id` AS jobId,
        ajpn.`job_phase_id` AS jobPhaseId,
        ajpn.`host`,
        ajpn.port,
        ajpn.`start_time` AS startTime,
        ajpn.`end_time` AS endTime,
        ajpn.`status`,
        ajp.`name` AS jobPhaseName,
        ajpn.`name` AS nodeName,
        ajpn.`user_name` as userName,
        ajpn.`protocol_id` AS protocolId,
        ajpn.`resource_id` as resourceId
        FROM `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.`id` = ajpnr.`node_id`
        WHERE ajpnr.`runner_map_id` = #{runnerId}
        AND ajpn.`job_phase_id` IN
        <foreach collection="jobPhaseIdList" separator="," open="(" close=")" item="jobPhaseId">
            #{jobPhaseId}
        </foreach>
        and ajpn.status = #{status}
    </select>
    <select id="getJobPhaseStatusCountByJobIdAndStatus" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM autoexec_job_phase
        WHERE job_id = #{jobId}
          and `status` = #{status}
    </select>
    <select id="getJobPhaseRunnerByJobIdAndPhaseIdListAndStatus"
            resultType="codedriver.framework.dto.runner.RunnerMapVo">
        SELECT DISTINCT ar.`id`,
        ar.`name`,
        ar.`url`,
        ar.`host`,
        ar.`port`,
        ajpr.runner_map_id as runnerMapId
        FROM `autoexec_job_phase_runner` ajpr
        LEFT JOIN `runner_map` arm ON ajpr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpr.`job_id` = #{jobId}
        and ajpr.`status` = #{status}
        <if test="jobPhaseIdList != null and jobPhaseIdList.size() > 0">
            and ajpr.`job_phase_id` in
            <foreach collection="jobPhaseIdList" item="jobPhaseId" close=")" open="(" separator=",">
                #{jobPhaseId}
            </foreach>
        </if>
    </select>

    <select id="getJobResourceInspectByResourceId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobResourceInspectVo">
        select resource_id as resourceId,job_id as jobId,phase_id as phaseId,lcd from autoexec_job_resource_inspect
        where resource_id in
        <foreach collection="list" item="resourceId" close=")" open="(" separator=",">
            #{resourceId}
        </foreach>
    </select>
    <select id="getJobByExpiredDays" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        SELECT aj.`id`,
               aj.`name`,
               aj.`status`,
               aj.`error_msg`       as errorMsg,
               aj.`plan_start_time` as planStartTime,
               aj.`start_time`      as startTime,
               aj.`end_time`        as endTime,
               aj.`operation_id`    as operationId,
               aj.`operation_type`  as operationType,
               aj.`exec_user`       as execUser,
               aj.`exec_user_type`  as execUserType,
               aj.`source`,
               aj.`thread_count`    as threadCount
        FROM `autoexec_job` aj
        WHERE aj.`start_time` &lt;= DATE_SUB(CURDATE(), INTERVAL #{value} DAY)
    </select>

    <select id="getJobPhaseRunnerMapIdListByJobIdList" resultType="java.lang.Long">
        select distinct runner_map_id from autoexec_job_phase_runner where job_id in
        <foreach collection="list" item="jobId" separator="," open="(" close=")">
            #{jobId}
        </foreach>
    </select>
    <select id="getJobPhaseListByJobIdAndNodeFromJob"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT id,
               job_id      as jobId,
               `name`,
               `exec_mode` as execMode,
               `sort`,
               `lncd`,
               `status`
        FROM `autoexec_job_phase`
        where `node_from` = 'job'
    </select>
    <select id="getJobGroupByJobIdAndSort"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobGroupVo">
        select id, policy, job_id, sort, lncd
        from autoexec_job_group
        where job_id = #{jobId}
          and `sort` = #{sort}
    </select>

    <select id="getJobGroupByJobId"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobGroupVo">
        select id, policy, job_id, sort
        from autoexec_job_group
        where job_id = #{jobId}
    </select>

    <select id="getJobRunnerListByJobIdAndGroupId" resultType="codedriver.framework.dto.runner.RunnerMapVo">
        SELECT DISTINCT ar.`id`,
                        ar.`name`,
                        ar.`url`,
                        ar.`host`,
                        ar.`port`,
                        ajpr.runner_map_id as runnerMapId
        FROM `autoexec_job_phase_runner` ajpr
                 left join `autoexec_job_phase` ajp on ajpr.job_phase_id = ajp.id
                 left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
                 LEFT JOIN `runner_map` arm ON ajpr.`runner_map_id` = arm.`id`
                 LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpr.`job_id` = #{jobId}
          and ajp.group_id = #{groupId}
    </select>
    <select id="getJobRunnerListByJobIdAndJobNodeIdList" resultType="codedriver.framework.dto.runner.RunnerMapVo">
        SELECT DISTINCT ar.`id`,
        ar.`name`,
        ar.`url`,
        ar.`host`,
        ar.`port`,
        ajpr.runner_map_id as runnerMapId
        FROM `autoexec_job_phase_node_runner` ajpr
        LEFT JOIN `runner_map` arm ON ajpr.`runner_map_id` = arm.`id`
        LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpr.`job_id` = #{jobId}
        and ajpr.node_id in
        <foreach collection="nodeIdList" item="nodeId" close=")" separator="," open="(">
            #{nodeId}
        </foreach>

    </select>
    <select id="getJobPhaseByJobIdAndGroupSortAndSort"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT ajp.`id`,
               ajp.`job_id`     as jobId,
               ajp.`status`,
               ajp.`start_time` as startTime,
               ajp.`end_time`   as endTime,
               ajp.`exec_user`  as execUser,
               ajp.`exec_mode`  as execMode,
               ajp.`name`       as name,
               ajp.`error_msg`  as errorMsg,
               ajp.`sort`,
               ajp.`uk`         as uk
        FROM `autoexec_job_phase` ajp
                 join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        where ajp.`job_id` = #{jobId}
          and ajg.`sort` = #{groupSort}
          and ajp.`sort` = #{sort} FROM `autoexec_job_phase`
        where `node_from` = 'job'
    </select>
    <select id="getJobPhaseNodeRunnerListByJobPhaseId"
            resultType="codedriver.framework.dto.runner.RunnerMapVo">
        SELECT DISTINCT ar.`id`,
                        ar.`name`,
                        ar.`url`,
                        ar.`host`,
                        ar.`port`,
                        ajpnr.runner_map_id as runnerMapId
        FROM `autoexec_job_phase_node_runner` ajpnr
                 LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
                 LEFT JOIN `runner` ar ON arm.`runner_id` = ar.`id`
        WHERE ajpnr.`job_phase_id` = #{value}
    </select>
    <select id="getJobPhaseListByJobIdAndPhaseIdList"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        SELECT ajp.id,
        ajp.job_id as jobId,
        ajp.`name`,
        ajp.`exec_mode` as execMode,
        ajp.`group_id` as groupId,
        ajp.`sort`,
        ajp.`warn_count` as warnCount,
        ajp.`status`
        FROM `autoexec_job_phase` ajp
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        WHERE ajp.job_id = #{jobId} and ajp.id in
        <foreach collection="jobPhaseIdList" item="value" separator="," open="(" close=")">
            #{value}
        </foreach>
        ORDER BY ajg.`sort`, ajp.`sort`, ajp.`name`
    </select>

    <select id="searchJobPhaseSqlCount" resultType="int">
        SELECT
        count( ajsd.`id` )
        FROM autoexec_job_sql_detail ajsd
        JOIN autoexec_job_phase ajp ON ajp.job_id = ajsd.job_id AND ajsd.job_phase_name = ajp.name
        <include refid="searchJobPhaseSql"></include>
    </select>

    <select id="searchJobPhaseSql" resultType="codedriver.framework.autoexec.dto.job.AutoexecSqlDetailVo">
        SELECT
        ajsd.`id`,
        ajsd.`status`,
        ajsd.`sql_file` AS sqlFile,
        ajsd.`start_time` AS startTime,
        ajsd.`end_time` AS endTime,
        r.`host` AS runnerHost,
        r.`port` AS runnerPort,
        ajsd.resource_id AS resourceId,
        ajsd.`host`,
        ajsd.`port`,
        ajsd.`node_name` AS nodeName
        FROM autoexec_job_sql_detail ajsd
        JOIN autoexec_job_phase ajp ON ajp.job_id = ajsd.job_id AND ajsd.job_phase_name = ajp.name
        LEFT JOIN runner r ON r.id = ajsd.runner_id
        <include refid="searchJobPhaseSql"></include>
        order by ajsd.`sql_file` desc
        <if test="needPage">
            LIMIT #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="getSqlDetailIdListByJobIdAndPhaseNameAndResourceIdAndLcd" resultType="java.lang.Long">
        SELECT ajsd.`id`
        FROM autoexec_job_sql_detail ajsd
        WHERE ajsd.job_id = #{jobId}
          and ajsd.job_phase_name = #{phaseName}
          and ajsd.resource_id = #{resourceId}
          and ajsd.lcd != #{lcd}
          and is_delete = 0
    </select>
    <select id="searchJobPhaseNodeByDistinctResourceIdCount" resultType="java.lang.Integer">
        SELECT
        count( DISTINCT IFNULL(ajpn.`resource_id`,-1))
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp on ajpn.`job_phase_id` = ajp.`id`
        left join `autoexec_job_group` ajg on ajp.job_id = ajg.job_id and ajp.group_id = ajg.id
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
    </select>
    <select id="searchJobPhaseNodeByDistinct"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        DISTINCT ajpn.`resource_id` AS resourceId,
        ajpn.`host`,
        ajpn.`port`,
        ajpn.`protocol_id` AS protocolId,
        ajpn.NAME AS nodeName,
        ajpn.type AS nodeType,
        ajpn.user_name as userName,
        arm.id AS runnerMapId
        FROM
        `autoexec_job_phase_node` ajpn
        LEFT JOIN `autoexec_job_phase` ajp ON ajpn.`job_phase_id` = ajp.`id`
        LEFT JOIN `autoexec_job_group` ajg ON ajp.job_id = ajg.job_id AND ajp.group_id = ajg.id
        LEFT JOIN `autoexec_job_phase_node_runner` ajpnr ON ajpn.id = ajpnr.`node_id`
        LEFT JOIN `runner_map` arm ON ajpnr.`runner_map_id` = arm.`id`
        <where>
            <include refid="searchJobPhaseNodeSql"/>
        </where>
        ORDER BY ajpn.`host`,ajpn.`port`
        limit #{startNum}, #{pageSize}
    </select>
    <select id="getJobGroupById" resultType="codedriver.framework.autoexec.dto.job.AutoexecJobGroupVo">
        select id, policy, job_id, sort, lncd, config as configStr
        from autoexec_job_group
        where id = #{value}
    </select>

    <select id="getJobSqlIdListByJobIdAndJobPhaseName" resultType="java.lang.Long">
        select id
        from autoexec_job_sql_detail
        where job_id = #{jobId}
          and job_phase_name = #{phaseName}
    </select>

    <select id="getJobSqlListByJobIdAndJobPhaseName"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecSqlDetailVo">
        select ajsd.`id`,
               ajsd.`md5`,
               ajsd.`status`,
               ajsd.`sql_file`    as sqlFile,
               ajsd.`runner_id`   as runnerId,
               ajsd.`resource_id` as resourceId
        from autoexec_job_sql_detail ajsd
        where ajsd.job_id = #{jobId}
          and ajsd.job_phase_name = #{phaseName}
    </select>

    <select id="getJobSqlIdListByJobIdAndJobPhaseNameList" resultType="java.lang.Long">
        select id
        from autoexec_job_sql_detail
        where job_id = #{jobId}
        and job_phase_name in
        <foreach collection="jobPhaseNameList" item="name" separator="," open="(" close=")">
            #{name}
        </foreach>
    </select>
    <select id="getJobPhaseNodeListByJobIdAndPhaseName"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajpn.`id`,
               ajpn.`job_id`       AS jobId,
               ajpn.`job_phase_id` AS jobPhaseId,
               ajpn.`host`,
               ajpn.`port`,
               ajpn.`start_time`   AS startTime,
               ajpn.`end_time`     AS endTime,
               ajpn.`resource_id`  as resourceId,
               ajpn.`status`
        FROM `autoexec_job_phase_node` ajpn
                 join autoexec_job_phase ajp on ajpn.job_phase_id = ajp.id
        where ajpn.`job_id` = #{jobId}
          and ajp.`name` = #{phaseName}
    </select>
    <select id="getJobPhaseNodeListBySqlIdList"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT ajsd.`id`,
        ajsd.`job_id` AS jobId,
        ajsd.`job_phase_id` AS jobPhaseId,
        ajsd.`host`,
        ajsd.`port`,
        ajsd.`node_name`as nodeName,
        ajsd.`node_type` as nodeType,
        ajsd.`start_time` AS startTime,
        ajsd.`end_time` AS endTime,
        ajsd.`resource_id` as resourceId,
        ajsd.`user_name` as userName,
        ajsd.`status`,
        ajsd.runner_id as runnerMapId,
        ajsd.sql_file as sqlFile,
        r.url as runnerUrl
        from autoexec_job_sql_detail ajsd
        left join runner_map rm on rm.id = ajsd.runner_id
        left join runner r on r.id = rm.runner_id
        where ajsd.id in
        <foreach collection="sqlIdList" item="sqlId" close=")" open="(" separator=",">
            #{sqlId}
        </foreach>
    </select>

    <select id="getJobSqlDetailListByJobIdAndPhaseName"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecSqlDetailVo">
        SELECT ajsd.`id`,
               ajsd.`md5`,
               ajsd.`status`,
               ajsd.`sql_file`    as sqlFile,
               ajsd.`runner_id`   as runnerId,
               ajsd.`resource_id` as resourceId,
               ajsd.`host`,
               ajsd.`port`,
               ajsd.`node_name`   as nodeName,
               ajsd.`node_type`   as nodeType,
               ajsd.`user_name`   as username
        FROM autoexec_job_sql_detail ajsd
                 JOIN autoexec_job_phase ajp ON ajp.job_id = ajsd.job_id AND ajsd.job_phase_name = ajp.name
        where ajsd.job_id = #{jobId}
          and ajsd.job_phase_name = #{phaseName}
    </select>

    <select id="getJobSqlByResourceIdAndJobIdAndJobPhaseNameAndSqlFile"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecSqlDetailVo">
        select ajsd.`id`,
               ajsd.`md5`,
               ajsd.`status`,
               ajsd.`sql_file`    as sqlFile,
               ajsd.`runner_id`   as runnerId,
               ajsd.`resource_id` as resourceId
        from autoexec_job_sql_detail ajsd
        where resource_id = #{resourceId}
          and job_id = #{jobId}
          and job_phase_name = #{phaseName}
          and sql_file = #{sqlFile}
    </select>

    <select id="getJobSqlById"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecSqlDetailVo">
        select ajsd.`id`,
               ajsd.`md5`,
               ajsd.`status`,
               ajsd.`host`,
               ajsd.`port`,
               ajsd.`job_phase_name` as phaseName,
               ajsd.`job_id`         as jobId,
               ajsd.`sql_file`       as sqlFile,
               ajsd.`runner_id`      as runnerId,
               ajsd.`resource_id`    as resourceId
        from autoexec_job_sql_detail ajsd
        where ajsd.id = #{id}
    </select>
    <select id="getJobSqlByJobPhaseIdAndResourceIdAndSqlName"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecSqlDetailVo">
        select ajsd.`id`,
               ajsd.`md5`,
               ajsd.`status`,
               ajsd.`host`,
               ajsd.`port`,
               ajsd.`job_phase_name` as phaseName,
               ajsd.`job_id`         as jobId,
               ajsd.`sql_file`       as sqlFile,
               ajsd.`runner_id`      as runnerId,
               ajsd.`resource_id`    as resourceId
        from autoexec_job_sql_detail ajsd
        where ajsd.`job_phase_id` = #{jobPhaseId}
          and ajsd.`resource_id` = #{resourceId}
          and ajsd.`sql_file` = #{sqlName}
    </select>
    <select id="getJobPhaseRunnerByJobIdAndPhaseIdList"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseRunnerVo">
        SELECT
        job_id as jobId,
        job_group_id as jobGroupId,
        job_phase_id as jobPhaseId,
        `status`,
        runner_map_id as runnerMapId,
        is_fire_next as isFireNext,
        lcd,
        warn_count as warnCount
        FROM
        autoexec_job_phase_runner
        where job_id = #{jobId} and job_phase_id in
        <foreach collection="jobPhaseIdList" item="jobPhaseId" open="(" close=")" separator=",">
            #{jobPhaseId}
        </foreach>
    </select>

    <sql id="searchJobPhaseSql">
        <where>
            <if test="statusList != null and statusList.size() > 0 ">
                and ajsd.`status` in
                <foreach collection="statusList" item="status" open="(" close=")" separator=",">
                    #{status}
                </foreach>
            </if>
            <if test="keyword != null and keyword != ''">
                and (ajsd.`node_name` like concat('%',#{keyword},'%') or ajsd.`host` like concat('%',#{keyword},'%'))
            </if>
            <if test="isDelete != null">
                and ajsd.`is_delete` = #{isDelete}
            </if>
            and ajsd.job_id= #{jobId}
            and ajsd.job_phase_id= #{jobPhaseId}
        </where>
    </sql>

    <select id="getAutoexecJobNodeListByResourceIdList" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        a.`id`,
        a.`job_id` AS jobId,
        a.`status`,
        a.`resource_id` as resourceId
        from autoexec_job_phase_node a
        join autoexec_job_resource_inspect b on b.`phase_id` = a.`job_phase_id` and b.`resource_id` = a.`resource_id`
        where a.`resource_id` in
        <foreach collection="list" item="resourceId" open="(" separator="," close=")">
            #{resourceId}
        </foreach>
    </select>

    <select id="getAutoexecJobNodeListByJobIdAndResourceIdList"
            resultType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        SELECT
        a.`id`,
        a.`job_id` AS jobId,
        a.`status`,
        a.`resource_id` as resourceId
        FROM autoexec_job_phase_node a
        WHERE a.`job_id` = #{jobId} AND a.`resource_id` IN
        <foreach collection="resourceIdList" item="resourceId" open="(" separator="," close=")">
            #{resourceId}
        </foreach>
    </select>

    <insert id="insertJob" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        INSERT INTO `autoexec_job` (`id`,
        `name`,
        `status`,
        <if test="planStartTime != null">
            `plan_start_time`,
        </if>
        `operation_id`,
        `operation_type`,
        `thread_count`,
        `param_hash`,
        `exec_user`,
        `exec_user_type`,
        `config_hash`,
        <if test="triggerType != null and triggerType !='' ">
            `trigger_type`,
        </if>
        `source`
        )
        VALUES (#{id},
        #{name},
        #{status},
        <if test="planStartTime != null">
            #{planStartTime},
        </if>
        #{operationId},
        #{operationType},
        #{threadCount},
        #{paramHash},
        #{execUser},
        #{execUserType},
        #{configHash},
        <if test="triggerType != null and triggerType !='' ">
            #{triggerType},
        </if>
        #{source}
        );
    </insert>

    <insert id="insertJobPhase" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        INSERT INTO `autoexec_job_phase` (`id`,
                                          `job_id`,
                                          `name`,
                                          `status`,
                                          `exec_user`,
                                          `exec_mode`,
                                          `lcd`,
                                          `group_id`,
                                          `execute_policy`,
                                          `sort`)
        VALUES (#{id},
                #{jobId},
                #{name},
                #{status},
                #{execUser},
                #{execMode},
                now(3),
                #{groupId},
                #{executePolicy},
                #{sort});
    </insert>

    <insert id="insertJobPhaseNode"
            parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        INSERT INTO `autoexec_job_phase_node` (`id`,
                                               `job_id`,
                                               `job_phase_id`,
                                               `host`,
                                               `port`,
                                               `protocol_id`,
                                               `name`,
                                               `type`,
                                               `user_name`,
                                               `resource_id`,
                                               `lcd`,
                                               `status`)
        VALUES (#{id},
                #{jobId},
                #{jobPhaseId},
                #{host},
                #{port},
                #{protocolId},
                #{nodeName},
                #{nodeType},
                #{userName},
                #{resourceId},
                #{lcd},
                #{status});
    </insert>

    <insert id="insertJobPhaseOperation"
            parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseOperationVo">
        INSERT INTO `autoexec_job_phase_operation` (`id`,
        `job_id`,
        `job_phase_id`,
        `uk`,
        `name`,
        `type`,
        `parser`,
        `exec_mode`,
        `fail_policy`,
        <if test="type != null and type == 'script'">
            `version_id`,
        </if>
        `sort`,
        `operation_id`,
        `profile_id`,
        <if test="parentOperationId != null">
            `parent_operation_id`,
        </if>
        <if test="parentOperationType != null">
            `parent_operation_type`,
        </if>
        `param_hash`)
        VALUES (#{id},
        #{jobId},
        #{jobPhaseId},
        #{uk},
        #{name},
        #{type},
        #{parser},
        #{execMode},
        #{failPolicy},
        <if test="type != null and type == 'script'">
            #{versionId},
        </if>
        #{sort},
        #{operationId},
        #{profileId},
        <if test="parentOperationId != null">
            #{parentOperationId},
        </if>
        <if test="parentOperationType != null">
            #{parentOperationType},
        </if>
        #{paramHash});
    </insert>

    <insert id="insertIgnoreJobContent"
            parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobContentVo">
        INSERT IGNORE INTO `autoexec_job_content` (`hash`, `content`)
        VALUES (#{hash}, #{content});
    </insert>

    <insert id="insertIgnoreJobPhaseNodeRunner"
            parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeRunnerVo">
        INSERT ignore INTO `autoexec_job_phase_node_runner` (`job_id`, `job_phase_id`, `node_id`, `runner_map_id`)
        VALUES (#{jobId}, #{jobPhaseId}, #{nodeId}, #{runnerMapId});
    </insert>

    <insert id="insertJobPhaseRunner">
        INSERT INTO `autoexec_job_phase_runner` (`job_id`, `job_group_id`, `job_phase_id`, `runner_map_id`, `lcd`)
        VALUES (#{jobId}, #{jobGroupId}, #{jobPhaseId}, #{runnerMapId}, #{lcd})
        ON DUPLICATE KEY
            UPDATE `job_id`        = #{jobId},
                   `job_group_id`  = #{jobGroupId},
                   `job_phase_id`  = #{jobPhaseId},
                   `runner_map_id` = #{runnerMapId},
                   `lcd`           = #{lcd};
    </insert>

    <insert id="insertDuplicateJobEnv" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobEnvVo">
        INSERT INTO `autoexec_job_env` (`job_id`, `name`, `value`)
        VALUES (#{jobId}, #{name}, #{value})
        ON DUPLICATE KEY
            UPDATE `job_id` = #{jobId},
                   `name`   = #{name},
                   `value`  = #{value};
    </insert>
    <insert id="insertIgnoreIntoJobInvoke">
        INSERT INTO `autoexec_job_invoke` (`job_id`, `invoke_id`, `source`, `type`)
        VALUES (#{jobId}, #{invokeId}, #{source}, #{type});
    </insert>
    <insert id="insertDuplicateJobResourceInspect">
        INSERT INTO `autoexec_job_resource_inspect` (`job_id`, `resource_id`, `phase_id`, `lcd`)
        VALUES (#{jobId}, #{resourceId}, #{phaseId}, #{lcd})
        ON DUPLICATE KEY
            UPDATE `job_id`      = #{jobId},
                   `resource_id` = #{resourceId},
                   `phase_id`    = #{phaseId},
                   `lcd`         = #{lcd};
    </insert>
    <insert id="insertJobGroup">
        INSERT INTO `autoexec_job_group` (`id`, `job_id`, `sort`, `policy`, `config`)
        values (#{id}, #{jobId}, #{sort}, #{policy}, #{configStr})
    </insert>

    <insert id="insertSqlDetail" parameterType="codedriver.framework.autoexec.dto.job.AutoexecSqlDetailVo">
        insert into `autoexec_job_sql_detail`(`id`,
        `job_id`,
        `host`,
        `port`,
        `resource_id`,
        `node_name`,
        `runner_id`,
        `job_phase_id`,
        `job_phase_name`,
        `sql_file`,
        `status`,
        `md5`,
        <choose>
            <when test="status == 'pending'">
            </when>
            <when test="status == 'running'">
                `start_time`,
            </when>
            <otherwise>
                `end_time`,
            </otherwise>
        </choose>
        `is_delete`)
        values (#{id},
        #{jobId},
        #{host},
        #{port},
        #{resourceId},
        #{nodeName},
        #{runnerId},
        #{phaseId},
        #{phaseName},
        #{sqlFile},
        #{status},
        #{md5},
        <choose>
            <when test="status == 'pending'">
            </when>
            <when test="status == 'running'">
                now(3),
            </when>
            <otherwise>
                now(3),
            </otherwise>
        </choose>
        #{isDelete})
    </insert>

    <insert id="insertSqlDetailList">
        insert into `autoexec_job_sql_detail`(`id`, `job_id`,`host`,`port`,
        `resource_id`,`node_name`,`node_type`,`user_name`,`runner_id`,`job_phase_id`,`job_phase_name`,
        `sql_file`, `status`, `md5`,`lcd`,
        `is_delete`)
        values
        <foreach collection="sqlList" item="vo" separator=",">
            (#{vo.id},
            #{vo.jobId},
            #{vo.host},
            #{vo.port},
            #{vo.resourceId},
            #{vo.nodeName},
            #{vo.nodeType},
            #{vo.username},
            #{runnerId},
            #{phaseId},
            #{phaseName},
            #{vo.sqlFile},
            #{vo.status},
            #{vo.md5},
            #{lcd},
            #{vo.isDelete})
        </foreach>
        ON DUPLICATE KEY
        UPDATE `lcd`=#{lcd},
        `is_delete`= 0
    </insert>

    <update id="updateJobPhaseStatus" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseVo">
        UPDATE `autoexec_job_phase`
        SET `status` = #{status}
        <if test="status == 'running'">
            ,`start_time` = NOW(3)
        </if>
        <if test="errorMsg != null and errorMsg != ''">
            ,`error_msg` = #{errorMsg}
        </if>
        <if test="status == 'completed' or status == 'failed'">
            ,`end_time` = NOW(3)
        </if>
        <if test="warnCount != null">
            ,`warn_count` = #{warnCount}
        </if>
        WHERE id = #{id}
    </update>

    <update id="updateJobStatus" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        UPDATE `autoexec_job`
        SET `status` = #{status}
        <if test="status == 'running' and isFirstFire == 1">
            ,`start_time` = NOW(3)
            ,`end_time` = NULL
        </if>
        <if test="errorMsg != null and errorMsg != ''">
            ,`error_msg` = #{errorMsg}
        </if>
        <if test="status == 'completed' or status == 'failed'">
            ,`end_time` = NOW(3)
        </if>
        WHERE id = #{id}
    </update>

    <update id="updateJobPhaseRunnerStatusBatch">
        UPDATE `autoexec_job_phase_runner`
        SET `status` = #{status}
        WHERE job_phase_id in
        <foreach collection="phaseIdList" item="phaseId" separator="," open="(" close=")">
            #{phaseId}
        </foreach>
        <if test="runnerId != null">
            and runner_map_id = #{runnerId}
        </if>
    </update>

    <update id="updateJobPhaseNodeStatus" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobPhaseNodeVo">
        UPDATE
        `autoexec_job_phase_node`
        SET
        <if test="status == 'running'">
            `start_time` = NOW(3),
        </if>
        <if test="status == 'succeed' or status == 'failed' or status == 'ignored'">
            `end_time` = NOW(3),
        </if>
        <if test="warnCount != null">
            `warn_count` = #{warnCount},
        </if>
        `status` = #{status}
        WHERE `job_id` = #{jobId}
        AND `job_phase_id` = #{jobPhaseId}
        AND `id` = #{id}
    </update>
    <update id="updateJobPhaseStatusByJobId">
        UPDATE `autoexec_job_phase`
        SET `status`     = #{status}
          , `start_time` = NULL

          , `end_time`   = NULL
        WHERE `job_id` = #{jobId}
    </update>
    <update id="updateJobPhaseNodeStatusByJobIdAndIsDelete">
        UPDATE `autoexec_job_phase_node`
        SET `status`     = #{status}
          , `start_time` = NULL

          , `end_time`   = NULL
        WHERE `job_id` = #{jobId}
          and `is_delete` = #{isDelete}
    </update>
    <update id="updateJobPhaseRunnerStatus">
        UPDATE
        `autoexec_job_phase_runner`
        SET
        `status` = #{status},
        `warn_count` = #{warnCount}
        WHERE `job_phase_id` in
        <foreach collection="jobPhaseIdList" item="phaseId" separator="," open="(" close=")">
            #{phaseId}
        </foreach>
        AND `runner_map_id` = #{runnerId};
    </update>
    <update id="updateJobPhaseRunnerStatusByJobIdAndRunnerIdAndStatus">
        UPDATE
            `autoexec_job_phase_runner`
        SET `status` = #{status}
        WHERE `job_id` = #{jobId}
          AND `runner_map_id` = #{runnerId};
    </update>
    <update id="updateBatchJobPhaseRunnerStatus">
        UPDATE
            `autoexec_job_phase_runner`
        SET `status` = #{status}
        WHERE `job_phase_id` = #{jobPhaseId}
    </update>
    <update id="updateJobPhaseNodeListStatus">
        UPDATE
        `autoexec_job_phase_node`
        SET
        `status` = #{status},
        <if test="status == 'pending'">
            `start_time` = null,
        </if>
        <if test="status == 'pending'">
            `end_time` = null
        </if>
        WHERE `id` in
        <foreach collection="nodeIdList" item="nodeId" open="(" close=")" separator=",">
            #{nodeId}
        </foreach>
    </update>
    <update id="updateJobPhaseStatusByPhaseIdList">
        UPDATE
        `autoexec_job_phase`
        SET
        `status` = #{status}
        WHERE `id` in
        <foreach collection="phaseIdList" item="phaseId" open="(" close=")" separator=",">
            #{phaseId}
        </foreach>
    </update>
    <update id="updateJobPhaseNodeById">
        UPDATE
            `autoexec_job_phase_node`
        SET `status`     = #{status},
            `start_time` = #{startTime},
            `end_time`   = #{endTime}
        WHERE `id` = #{id}
    </update>

    <update id="updateJobPhaseNodeByJobIdAndPhaseIdAndResourceId">
        UPDATE
        `autoexec_job_phase_node`
        SET `status` = #{status},
        `start_time` = #{startTime},
        `end_time` = #{endTime},
        `is_delete` = 0,
        `lcd` = #{lcd}
        WHERE `job_id` = #{jobId}
        and `job_phase_id` = #{jobPhaseId}
        <if test="resourceId == null">
            and `resource_id` is null
        </if>
        <if test="resourceId != null">
            and `resource_id` = #{resourceId}
        </if>

    </update>

    <update id="updateJobPhaseNodeStatusByJobIdAndJobPhaseIdListAndRunnerId">
        UPDATE
        `autoexec_job_phase_node`
        SET
        `end_time` = NOW(3),
        `status` = #{status}
        WHERE `job_id` = #{jobId}
        AND `job_phase_id` in
        <foreach collection="jobPhaseIdList" item="jobPhaseId" separator="," open="(" close=")">
            #{jobPhaseId}
        </foreach>
        and `status` in
        <foreach collection="nodeStatusList" item="nodeStatus" open="(" separator="," close=")">
            #{nodeStatus}
        </foreach>
    </update>
    <update id="updateJobPhaseRunnerFireNextByPhaseIdAndRunnerId">
        update `autoexec_job_phase_runner`
        set is_fire_next = #{isFireNext}
        where job_phase_id = #{phaseId}
          and runner_map_id = #{runnerMapId}
    </update>
    <update id="updateJobPhaseRunnerFireNextByJobIdAndGroupSortAndRunnerId">
        update autoexec_job_phase_runner ajpr
            join autoexec_job_group ajg on ajpr.job_id = ajg.job_id and ajpr.job_group_id = ajg.id
        set ajpr.is_fire_next = #{isFireNext}
        where ajpr.job_id = #{jobId}
          and ajg.sort = #{groupSort}
          and ajpr.runner_map_id = #{runnerMapId}
    </update>
    <update id="updateJobPhaseLcdById">
        update `autoexec_job_phase`
        set `lcd` = #{lcd}
        where id = #{jobPhaseId}
    </update>
    <update id="updateJobParamHashById">
        update `autoexec_job`
        set `param_hash` = #{paramHash}
        where `id` = #{jobId}
    </update>

    <update id="updateJobPhaseNodeFrom">
        update `autoexec_job_phase`
        set `node_from` = #{nodeFrom}
        where id = #{jobPhaseId}
    </update>
    <update id="updateJobPhaseNodeResetStartTimeAndEndTimeByNodeIdList">
        update `autoexec_job_phase_node`
        set `start_time` = null , `end_time` = null
        where id in
        <foreach collection="nodeIdList" item="nodeId" open="(" separator="," close=")">
            #{nodeId}
        </foreach>
    </update>
    <update id="updateJobPhaseLncdById">
        update `autoexec_job_phase`
        set `lncd` = #{lcd}
        where id = #{jobPhaseId}
    </update>

    <update id="updateJobPlanStartTimeAndTriggerTypeById"
            parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        UPDATE `autoexec_job`
        SET `plan_start_time` = #{planStartTime},
            `trigger_type`    = #{triggerType}
        WHERE `id` = #{id}
    </update>

    <update id="updateJobExecUser" parameterType="codedriver.framework.autoexec.dto.job.AutoexecJobVo">
        UPDATE `autoexec_job`
        SET `exec_user` = #{execUser}
        WHERE `id` = #{id}
    </update>

    <update id="updateSqlIsDeleteByIdList">
        UPDATE autoexec_job_sql_detail
        SET `is_delete` = 1
        WHERE `id` IN
        <foreach collection="idList" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <update id="updateSqlDetailById">
        UPDATE autoexec_job_sql_detail
        SET `md5` = #{md5},
        `status` = #{status},
        `node_name` = #{nodeName},
        `host` = #{host},
        `port` = #{port},
        <choose>
            <when test="status == 'pending'">
            </when>
            <when test="status == 'running'">
                `start_time`=now(3),
            </when>
            <otherwise>
                `end_time`=now(3),
            </otherwise>
        </choose>
        `is_delete` = 0
        WHERE
        `id` = #{id}
    </update>

    <delete id="updateJobPhaseNodeIsDeleteByJobPhaseIdAndLcd">
        update
            `autoexec_job_phase_node`
        set `is_delete` = 1
        where `job_phase_id` = #{jobPhaseId}
          and (`lcd` != #{lcd} OR `lcd` IS NULL)
          and `is_delete` != 1
    </delete>

    <update id="updateJobLncdById">
        update `autoexec_job`
        set `lncd` = #{lcd}
        where id = #{jobId}
    </update>

    <update id="updateJobGroupLncdById">
        update `autoexec_job_group`
        set `lncd` = #{lcd}
        where id = #{jobGroupId}
    </update>

    <update id="resetJobSqlStatusBySqlIdList">
        UPDATE autoexec_job_sql_detail
        SET `status` = "pending",
        `start_time` = null,
        `end_time` = null
        WHERE id IN
        <foreach collection="idList" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>

    <update id="updateJobPhaseOperationVersionIdByJobIdAndOperationId">
        update autoexec_job_phase_operation
        set `version_id` = #{versionId}
        where `job_id` = #{jobId}
          and `operation_id` = #{operationId}
    </update>
    <update id="updateJobPhaseStatusByJobIdAndPhaseStatus">
        UPDATE
            `autoexec_job_phase`
        SET `status` = #{status}
        WHERE `job_id` = #{jobId}
          and `status` = #{whereStatus}
    </update>

    <delete id="deleteJobContentByHash" parameterType="java.lang.String">
        DELETE
        FROM `autoexec_job_content`
        WHERE `hash` = #{value};
    </delete>

    <delete id="deleteJobPhaseOperationByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job_phase_operation`
        WHERE `job_id` = #{value}
    </delete>

    <delete id="deleteJobPhaseNodeByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job_phase_node`
        WHERE `job_id` = #{value};
    </delete>

    <delete id="deleteJobPhaseByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job_phase`
        WHERE `job_id` = #{value};
    </delete>

    <delete id="deleteJobByJobId" parameterType="java.lang.Long">
        DELETE
        FROM `autoexec_job`
        WHERE `id` = #{value};
    </delete>

    <delete id="deleteJobPhaseNodeByJobPhaseIdList">
        DELETE
        FROM `autoexec_job_phase_node`
        WHERE `job_phase_id` in
        <foreach collection="jobPhaseIdList" item="phaseId" open="(" close=")" separator=",">
            #{phaseId}
        </foreach>
    </delete>
    <delete id="deleteJobPhaseRunnerByJobId">
        DELETE
        FROM `autoexec_job_phase_runner`
        WHERE `job_id` = #{value};
    </delete>
    <delete id="deleteJobPhaseNodeRunnerByJobId">
        DELETE ajpnr
        FROM `autoexec_job_phase_node_runner` ajpnr
                 LEFT JOIN `autoexec_job_phase_node` ajpn ON ajpnr.`node_id` = ajpn.`id`
        WHERE ajpn.`job_id` = #{value};
    </delete>
    <delete id="deleteJobPhaseNodeByJobPhaseIdAndLcd">
        DELETE
        FROM `autoexec_job_phase_node`
        where `job_phase_id` = #{jobPhaseId}
          and (`lcd` != #{lcd} OR `lcd` IS NULL)
    </delete>
    <delete id="deleteJobPhaseNodeByJobPhaseIdAndLcdAndStatus">
        DELETE
        FROM `autoexec_job_phase_node`
        where `job_phase_id` = #{jobPhaseId}
          and (`lcd` != #{lcd} OR `lcd` IS NULL)
          and `status` = #{status}
    </delete>
    <delete id="deleteJobPhaseNodeRunnerByJobPhaseIdAndLcdAndStatus">
        DELETE ajpnr
        FROM `autoexec_job_phase_node_runner` ajpnr
                 LEFT JOIN `autoexec_job_phase_node` ajpn ON ajpnr.`node_id` = ajpn.`id`
        WHERE ajpn.`job_phase_id` = #{jobPhaseId}
          and (ajpn.`lcd` != #{lcd} OR ajpn.`lcd` IS NULL)
          and ajpn.`status` = #{status}
    </delete>
    <delete id="deleteJobEvnByJobId">
        DELETE
        FROM `autoexec_job_env`
        WHERE `job_id` = #{value};
    </delete>
    <delete id="deleteJobInvokeByJobId">
        DELETE
        FROM `autoexec_job_invoke`
        WHERE `job_id` = #{value};
    </delete>
    <delete id="deleteJobResourceInspectByJobId">
        DELETE
        FROM `autoexec_job_resource_inspect`
        WHERE `job_id` = #{value};
    </delete>
    <delete id="deleteJobPhaseRunnerByJobPhaseIdAndRunnerMapId">
        DELETE
        FROM `autoexec_job_phase_runner`
        where `job_phase_id` = #{jobPhaseId}
          and `runner_map_id` = #{runnerMapId}
    </delete>
</mapper>

