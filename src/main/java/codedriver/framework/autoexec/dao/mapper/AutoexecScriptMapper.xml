<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.autoexec.dao.mapper.AutoexecScriptMapper">

    <sql id="getScriptBaseInfo">
        SELECT a.`id`,
               a.`name`,
               a.`exec_mode`          AS execMode,
               a.`type_id`            AS typeId,
               a.`risk_id`            AS riskId,
               c.`name`               AS typeName,
               a.`catalog_id`         AS catalogId,
               b.`name`               AS catalogName,
               d.`name`               AS riskName,
               a.`customtemplate_id`  AS customTemplateId,
               f.`name`               AS customTemplateName,
               a.`description`,
               a.`default_profile_id` AS defaultProfileId,
               e.`name`               AS defaultProfileName,
               a.`fcu`,
               a.`fcd`
        FROM `autoexec_script` a
                 LEFT JOIN `autoexec_catalog` b ON a.`catalog_id` = b.`id`
                 LEFT JOIN `autoexec_type` c ON a.`type_id` = c.`id`
                 LEFT JOIN `autoexec_risk` d ON a.`risk_id` = d.`id`
                 LEFT JOIN `autoexec_profile` e ON a.`default_profile_id` = e.`id`
                 LEFT JOIN `autoexec_customtemplate` f ON a.`customtemplate_id` = f.`id`
    </sql>

    <select id="getScriptBaseInfoById" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        <include refid="getScriptBaseInfo"/>
        WHERE a.`id` = #{value}
    </select>

    <select id="getScriptBaseInfoByName" parameterType="java.lang.String"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        <include refid="getScriptBaseInfo"/>
        WHERE a.`name` = #{value}
    </select>

    <select id="getAutoexecScriptByIdList" parameterType="java.util.List"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        select
        `id`,
        `name`,
        `exec_mode` as execMode,
        `type_id` as typeId,
        `risk_id` as riskId,
        (select `name` from `autoexec_type` where a.`type_id` = `id`) as typeName,
        (select `name` from `autoexec_risk` where a.`risk_id` = `id`) as riskName,
        `description`,
        `default_profile_id` as defaultProfileId,
        `fcu`,
        `fcd`
        from `autoexec_script` a
        where `id` in
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <select id="getScriptLockById" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        select `id`,
               `name`,
               `exec_mode` as execMode,
               `type_id`   as typeId,
               `risk_id`   as riskId,
               `fcu`,
               `fcd`
        from `autoexec_script` a
        where `id` = #{value}
            for
        update
    </select>

    <select id="checkScriptIsExistsById" parameterType="java.lang.Long" resultType="int">
        select count(1)
        from `autoexec_script`
        where `id` = #{value}
    </select>

    <select id="checkScriptNameIsExists" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo"
            resultType="int">
        select count(1)
        from `autoexec_script`
        where `name` = #{name}
          and `id` != #{id}
    </select>

    <select id="checkScriptUkIsExists" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo"
            resultType="int">
        select count(1)
        from `autoexec_script`
        where `uk` = #{uk}
          and `id` != #{id}
    </select>

    <select id="checkScriptIdListExists" parameterType="java.util.List" resultType="java.lang.Long">
        select `id`
        from `autoexec_script`
        where `id` in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="checkScriptLineContentHashIsExists" parameterType="java.lang.String" resultType="int">
        select count(1)
        from `autoexec_script_line_content`
        where `hash` = #{value}
    </select>

    <select id="getVersionByVersionId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select `id`,
               `script_id` as scriptId,
               `title`,
               `version`,
               `encoding`,
               `parser`,
               `status`,
               `reviewer`,
               `is_active` as isActive,
               `config`,
               `lcu`,
               `lcd`
        from `autoexec_script_version`
        where `id` = #{value}
    </select>

    <select id="getVersionByVersionIdList" parameterType="java.util.List"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select
        `id`,
        `script_id` as scriptId,
        `title`,
        `version`,
        `encoding`,
        `parser`,
        `status`,
        `reviewer`,
        `is_active` as isActive,
        `config`,
        `lcu`,
        `lcd`
        from `autoexec_script_version`
        where `id` in
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <select id="getVersionByVersionIdForUpdate" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select `id`,
               `script_id` as scriptId,
               `version`,
               `encoding`,
               `parser`,
               `status`,
               `reviewer`,
               `is_active` as isActive,
               `config`,
               `lcu`,
               `lcd`
        from `autoexec_script_version`
        where `id` = #{value}
            for
        update
    </select>

    <select id="getMaxVersionByScriptId" parameterType="java.lang.Long" resultType="int">
        select max(`version`)
        from `autoexec_script_version`
        where `script_id` = #{value}
    </select>

    <select id="getVersionCountByScriptId" parameterType="java.lang.Long" resultType="int">
        select count(1)
        from `autoexec_script_version`
        where `script_id` = #{value}
    </select>

    <resultMap id="scriptVersionMap" type="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        <result column="id" property="id"/>
        <result column="scriptId" property="scriptId"/>
        <result column="title" property="title"/>
        <result column="version" property="version"/>
        <result column="status" property="status"/>
        <result column="reviewer" property="reviewer"/>
        <result column="isActive" property="isActive"/>
        <result column="lcu" property="lcu"/>
        <result column="lcd" property="lcd"/>
    </resultMap>

    <select id="getVersionList" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo"
            resultMap="scriptVersionMap">
        select
        `id`,
        `version`,
        `status`,
        `reviewer`,
        `is_active` as isActive,
        `lcu`,
        `lcd`
        from `autoexec_script_version`
        where `script_id` = #{scriptId}
        order by `id` desc
        <if test="needPage == true">
            limit #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="getVersionListByScriptId"
            parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select
        `id`,
        `script_id` as scriptId,
        `version`,
        `encoding`,
        `parser`,
        `status`,
        `reviewer`,
        `is_active` as isActive,
        `lcu`,
        `lcd`
        from `autoexec_script_version`
        where `script_id` = #{scriptId}
        <if test="status != null and status != ''">
            and `status` = #{status}
        </if>
    </select>

    <select id="getVersionNumberListByScriptId" parameterType="java.lang.Long"
            resultType="codedriver.framework.common.dto.ValueTextVo">
        select `id`                    as `value`,
               CONCAT('版本', `version`) as `text`
        from `autoexec_script_version`
        where `script_id` = #{value}
        order by version desc
    </select>

    <sql id="searchVersionForSelect">
        from `autoexec_script_version`
        where `script_id` = #{scriptId}
        <if test="keyword != null and keyword != ''">
            and `title` LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="status != null and status != ''">
            and `status` = #{status}
        </if>
        <if test="excludeList != null and excludeList.size() > 0">
            and `id` not in
            <foreach collection="excludeList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </sql>

    <select id="searchVersionCountForSelect"
            parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo" resultType="int">
        select
        count(1)
        <include refid="searchVersionForSelect"/>
    </select>

    <select id="searchVersionListForSelect"
            parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo"
            resultMap="scriptVersionMap">
        select
        `id`,
        `script_id` as scriptId,
        `title`,
        `version`,
        `status`,
        `is_active` as isActive,
        `lcu`,
        `lcd`
        <include refid="searchVersionForSelect"/>
        order by `lcd` desc
        <if test="needPage == true">
            limit #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="getActiveVersionByScriptId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select `id`,
               `script_id` as scriptId,
               `version`,
               `encoding`,
               `parser`,
               `status`,
               `reviewer`,
               `is_active` as isActive,
               `lcd`,
               `lcu`
        from `autoexec_script_version`
        where `script_id` = #{value}
          and `is_active` = 1
    </select>

    <select id="getActiveVersionLockByScriptId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select `id`,
               `script_id` as scriptId,
               `version`,
               `encoding`,
               `parser`,
               `status`,
               `reviewer`,
               `is_active` as isActive,
               `lcd`,
               `lcu`
        from `autoexec_script_version`
        where `script_id` = #{value}
          and `is_active` = 1
            for
        update
    </select>

    <select id="getLatestVersionByScriptId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select `id`,
               `script_id` as scriptId,
               `version`,
               `encoding`,
               `parser`,
               `status`,
               `reviewer`,
               `is_active` as isActive,
               `lcd`,
               `lcu`
        from `autoexec_script_version`
        where `script_id` = #{value}
        order by `id` desc
        limit 1
    </select>

    <sql id="searchHistoricalVersion">
        from `autoexec_script_version`
        where `script_id` = #{scriptId}
        and `is_active` = 0
        <choose>
            <when test="status == 'notPassed'">
                and `status` != 'passed'
            </when>
            <when test="status == 'passed'">
                and `status` = 'passed'
            </when>
        </choose>
    </sql>

    <select id="searchHistoricalVersionCountByScriptIdAndStatus"
            parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo" resultType="int">
        select count(1)
        <include refid="searchHistoricalVersion"/>
    </select>

    <select id="searchHistoricalVersionListByScriptIdAndStatus"
            parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo"
            resultMap="scriptVersionMap">
        select
        `id`,
        `script_id` as scriptId,
        `title`,
        `version`,
        `status`,
        `reviewer`,
        `is_active` as isActive,
        `lcu`,
        `lcd`
        <include refid="searchHistoricalVersion"/>
        <choose>
            <when test="status == 'notPassed'">
                order by `lcd` desc
            </when>
            <when test="status == 'passed'">
                order by `version` desc
            </when>
        </choose>
        <if test="needPage">
            limit #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="getRecentlyVersionByScriptIdAndStatus"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select `id`,
               `script_id` as scriptId,
               `title`,
               `version`,
               `encoding`,
               `parser`,
               `status`,
               `reviewer`,
               `is_active` as isActive,
               `lcd`,
               `lcu`
        from `autoexec_script_version`
        where `script_id` = #{scriptId}
          and `status` = #{status}
        order by `lcd` desc
        limit 1
    </select>

    <select id="getParamListByVersionId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionParamVo">
        select `script_version_id` as scriptVersionId,
               `key`,
               `name`,
               `default_value`     as defaultValue,
               `type`,
               `mode`,
               `mapping_mode`      as mappingMode,
               `is_required`       as isRequired,
               `description`,
               `sort`,
               `config`
        from `autoexec_script_version_param`
        where `script_version_id` = #{value}
        order by `sort`
    </select>

    <select id="getOutputParamListByVersionId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionParamVo">
        select `script_version_id` as scriptVersionId,
               `key`,
               `name`,
               `default_value`     as defaultValue,
               `type`,
               `mode`,
               `mapping_mode`      as mappingMode,
               `is_required`       as isRequired,
               `description`,
               `sort`,
               `config`
        from `autoexec_script_version_param`
        where `script_version_id` = #{value} and `mode` = "output"
        order by `sort`
    </select>

    <select id="getAutoexecParamVoListByVersionId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.AutoexecParamVo">
        select `key`,
               `name`,
               `default_value` as defaultValue,
               `type`,
               `mode`,
               `mapping_mode`  as mappingMode,
               `is_required`   as isRequired,
               `description`,
               `sort`,
               `config`
        from `autoexec_script_version_param`
        where `script_version_id` = #{value}
        order by `sort`
    </select>

    <select id="getParamListByVersionIdAndMode"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionParamVo">
        select `script_version_id` as scriptVersionId,
               `key`,
               `name`,
               `default_value`     as defaultValue,
               `type`,
               `mode`,
               `mapping_mode`      as mappingMode,
               `is_required`       as isRequired,
               `description`,
               `sort`,
               `config`
        from `autoexec_script_version_param`
        where `script_version_id` = #{versionId}
          and `mode` = #{mode}
        order by `sort`
    </select>

    <select id="getParamListByScriptId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionParamVo">
        select a.`script_version_id` as scriptVersionId,
               a.`key`,
               a.`name`,
               a.`default_value`     as defaultValue,
               a.`type`,
               a.`mode`,
               a.`mapping_mode`      as mappingMode,
               a.`is_required`       as isRequired,
               a.`description`,
               a.`sort`,
               a.`config`
        from `autoexec_script_version_param` a
                 join `autoexec_script_version` b on a.`script_version_id` = b.`id`
        where b.`is_active` = 1
          and b.`script_id` = #{value}
        order by a.`sort`
    </select>

    <select id="getParamListByScriptVersionId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionParamVo">
        select a.`script_version_id` as scriptVersionId,
               a.`key`,
               a.`name`,
               a.`default_value`     as defaultValue,
               a.`type`,
               a.`mode`,
               a.`mapping_mode`      as mappingMode,
               a.`is_required`       as isRequired,
               a.`description`,
               a.`sort`,
               a.`config`
        from `autoexec_script_version_param` a
        where a.`script_version_id` = #{versionId}
        order by a.`sort`
    </select>

    <select id="getLineListByVersionId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptLineVo">
        select a.`id`,
               a.`script_id`         as scriptId,
               a.`script_version_id` as scriptVersionId,
               a.`content_hash`      as contentHash,
               a.`line_number`       as lineNumber,
               b.`content`
        from `autoexec_script_line` a
                 left join `autoexec_script_line_content` b
                           on a.`content_hash` = b.`hash`
        where a.`script_version_id` = #{value}
        order by a.`line_number`
    </select>

    <sql id="searchScriptCondition">
        <where>
            <if test="keyword != null and keyword != ''">
                and (
                `name` like CONCAT('%', #{keyword}, '%')
                or `description` like CONCAT('%', #{keyword}, '%')
                or exists (select 1 from `fulltextindex_word` fw
                join `fulltextindex_field_autoexec` ff on fw.`id` = ff.`word_id`
                join `autoexec_script_version` asv on ff.`target_id` = asv.`id`
                where a.`id` = asv.`script_id` and fw.`word` in
                <foreach collection="keywordList" item="k" open="(" separator="," close=")">
                    #{k}
                </foreach>
                )
                )
            </if>
            <if test="execMode != null and execMode != ''">
                and `exec_mode` = #{execMode}
            </if>
            <if test="typeIdList != null and typeIdList.size() != 0">
                and `type_id` in
                <foreach collection="typeIdList" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="catalogIdList != null and catalogIdList.size() != 0">
                and `catalog_id` in
                <foreach collection="catalogIdList" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="riskIdList != null and riskIdList.size() != 0">
                and `risk_id` in
                <foreach collection="riskIdList" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <choose>
                <when test="customTemplateId != null and customTemplateId == 0">
                    and `customtemplate_id` is not null
                </when>
                <otherwise>
                    <if test="customTemplateIdList != null and customTemplateIdList.size() > 0">
                        and `customtemplate_id` in
                        <foreach collection="customTemplateIdList" item="item" open="(" separator="," close=")">
                            #{item}
                        </foreach>
                    </if>
                </otherwise>
            </choose>
            <if test="versionStatus != null and versionStatus != ''">
                and exists (select 1 from `autoexec_script_version` b where b.`script_id` = a.`id` and b.`status` =
                #{versionStatus})
            </if>
            <if test="defaultValue != null and defaultValue.size() > 0">
                and a.`id` in
                <foreach collection="defaultValue" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </sql>

    <select id="searchScriptCount" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo"
            resultType="int">
        select
        count(`id`)
        from `autoexec_script` a
        <include refid="searchScriptCondition"/>
    </select>

    <resultMap id="AutoexecScriptMap" type="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="execMode" property="execMode"/>
        <result column="parser" property="parser"/>
        <result column="typeName" property="typeName"/>
        <result column="description" property="description"/>
        <result column="versionId" property="versionId"/>
        <result column="submittedVersionId" property="submittedVersionId"/>
        <result column="catalogId" property="catalogId"/>
        <!--<result column="currentVersion" property="currentVersion"/>-->
        <!--<result column="versionCount" property="versionCount"/>-->
        <!--<result column="passedVersionCount" property="passedVersionCount"/>-->
        <association property="riskVo" javaType="codedriver.framework.autoexec.dto.AutoexecRiskVo">
            <result property="id" column="riskId"/>
            <result property="name" column="riskName"/>
            <result property="color" column="riskColor"/>
        </association>
    </resultMap>

    <select id="searchScript" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo"
            resultMap="AutoexecScriptMap">
        select
        `id`,
        `name`,
        `exec_mode` as execMode,
        `description`,
        (select `name` from `autoexec_type` where a.`type_id` = `id`) as typeName,
        (select `name` from `autoexec_risk` where a.`risk_id` = `id`) as riskName,
        (select `color` from `autoexec_risk` where a.`risk_id` = `id`) as riskColor,
        (select `id` from `autoexec_script_version` where a.`id` = `script_id` and `status` = 'submitted')
        as submittedVersionId,
        `catalog_id` as catalogId
        -- (select `version` from `autoexec_script_version` where a.`id` = `script_id` and `is_active` = 1)
        -- as currentVersion,
        -- (select count(`id`) from `autoexec_script_version` where a.`id` = `script_id`) as versionCount,
        -- (select count(`id`) from `autoexec_script_version` where a.`id` = `script_id` and `status` = 'passed')
        -- as passedVersionCount
        from `autoexec_script` a
        <include refid="searchScriptCondition"/>
        order by `id` desc
        <if test="needPage == true">
            limit #{startNum}, #{pageSize}
        </if>
    </select>

    <sql id="searchToolAndScriptConditionForTool">
        from
        `autoexec_tool`
        where `is_active` = 1
        <if test="keyword != null and keyword != ''">
            and (`name` like CONCAT('%', #{keyword}, '%') or `description` like CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="execMode != null and execMode != ''">
            <choose>
                <when test="execMode == 'target' or execMode == 'runner_target'">
                    and `exec_mode` in ('target','runner_target','native')
                </when>
                <otherwise>
                    and `exec_mode` in (#{execMode},'native')
                </otherwise>
            </choose>
        </if>
        <if test="typeIdList != null and typeIdList.size() != 0">
            and `type_id` in
            <foreach collection="typeIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="riskIdList != null and riskIdList.size() != 0">
            and `risk_id` in
            <foreach collection="riskIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="excludeList != null and excludeList.size() != 0">
            and `id` not in
            <foreach collection="excludeList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </sql>

    <sql id="searchToolAndScriptConditionForScript">
        from
        `autoexec_script` a
        join `autoexec_script_version` b
        on a.`id` = b.`script_id`
        where b.`is_active` = 1
        <if test="keyword != null and keyword != ''">
            and (a.`name` like CONCAT('%', #{keyword}, '%') or a.`description` like CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="execMode != null and execMode != ''">
            <choose>
                <when test="execMode == 'target' or execMode == 'runner_target'">
                    and a.`exec_mode` in ('target','runner_target','native')
                </when>
                <otherwise>
                    and a.`exec_mode` in (#{execMode},'native')
                </otherwise>
            </choose>
        </if>
        <if test="typeIdList != null and typeIdList.size() != 0">
            and a.`type_id` in
            <foreach collection="typeIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="catalogIdList != null and catalogIdList.size() != 0">
            and a.`catalog_id` in
            <foreach collection="catalogIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="riskIdList != null and riskIdList.size() != 0">
            and a.`risk_id` in
            <foreach collection="riskIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="excludeList != null and excludeList.size() != 0">
            and a.`id` not in
            <foreach collection="excludeList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        group by a.`id`
    </sql>

    <select id="searchScriptAndToolCount" parameterType="codedriver.framework.autoexec.dto.AutoexecOperationVo"
            resultType="int">
        select
        count(1)
        from
        (
        <if test="(type == null or type == '') or (type != null and type != '' and type == 'tool')">
            select
            `id`
            <include refid="searchToolAndScriptConditionForTool"/>
        </if>
        <if test="type == null or type == ''">
            union
        </if>
        <if test="(type == null or type == '') or (type != null and type != '' and type == 'script')">
            select
            a.`id`
            <include refid="searchToolAndScriptConditionForScript"/>
        </if>
        ) a
    </select>

    <select id="searchScriptAndTool" parameterType="codedriver.framework.autoexec.dto.AutoexecOperationVo"
            resultMap="autoexecToolAndScriptMap">
        select
        a.`id`,
        a.`name`,
        a.`type`,
        a.`execMode`,
        a.`typeId`,
        a.`typeName`,
        a.`riskId`,
        a.`riskName`,
        a.`riskColor`,
        a.`description`,
        a.`defaultProfileId`
        from
        (
        <if test="(type == null or type == '') or (type != null and type != '' and type == 'tool')">
            select
            `id`,
            `name`,
            'tool' as `type`,
            `exec_mode` as execMode,
            `type_id` as typeId,
            (select `name` from `autoexec_type` where `id` = `type_id`) as typeName,
            `risk_id` as riskId,
            (select `name` from `autoexec_risk` where `id` = `risk_id`) as riskName,
            (select `color` from `autoexec_risk` where `id` = `risk_id`) as riskColor,
            `description`,
            `default_profile_id` as defaultProfileId
            <include refid="searchToolAndScriptConditionForTool"/>
        </if>
        <if test="type == null or type == ''">
            union
        </if>
        <if test="(type == null or type == '') or (type != null and type != '' and type == 'script')">
            select
            a.`id`,
            `name`,
            'script' as `type`,
            `exec_mode` as execMode,
            `type_id` as typeId,
            (select `name` from `autoexec_type` where `id` = `type_id`) as typeName,
            `risk_id` as riskId,
            (select `name` from `autoexec_risk` where `id` = `risk_id`) as riskName,
            (select `color` from `autoexec_risk` where `id` = `risk_id`) as riskColor,
            a.`description`,
            a.`default_profile_id` as defaultProfileId
            <include refid="searchToolAndScriptConditionForScript"/>
        </if>
        ) a
        order by a.`name`
        <if test="needPage == true">
            limit #{startNum}, #{pageSize}
        </if>
    </select>

    <resultMap id="autoexecToolAndScriptMap" type="codedriver.framework.autoexec.dto.AutoexecOperationVo">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="type" property="type"/>
        <result column="execMode" property="execMode"/>
        <result column="typeId" property="typeId"/>
        <result column="typeName" property="typeName"/>
        <result column="description" property="description"/>
        <result column="defaultProfileId" property="defaultProfileId"/>
        <result column="configStr" property="configStr"/>
        <association property="riskVo" javaType="codedriver.framework.autoexec.dto.AutoexecRiskVo">
            <result column="riskId" property="id"/>
            <result column="riskName" property="name"/>
            <result column="riskColor" property="color"/>
        </association>
        <collection property="paramList" ofType="codedriver.framework.autoexec.dto.AutoexecParamVo">
            <result property="key" column="key"/>
            <result property="name" column="paramName"/>
            <result property="defaultValue" column="defaultValue"/>
            <result property="type" column="paramType"/>
            <result property="mode" column="mode"/>
            <result property="mappingMode" column="mappingMode"/>
            <result property="isRequired" column="isRequired"/>
            <result property="description" column="paramDescription"/>
            <result property="sort" column="sort"/>
            <result property="config" column="config"/>
        </collection>
    </resultMap>

    <resultMap id="autoexecOperationMap" type="codedriver.framework.autoexec.dto.AutoexecOperationVo">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="type" property="type"/>
        <result column="execMode" property="execMode"/>
        <result column="typeId" property="typeId"/>
        <result column="typeName" property="typeName"/>
        <result column="description" property="description"/>
        <result column="defaultProfileId" property="defaultProfileId"/>
        <result column="configStr" property="configStr"/>
        <association property="riskVo" javaType="codedriver.framework.autoexec.dto.AutoexecRiskVo">
            <result column="riskId" property="id"/>
            <result column="riskName" property="name"/>
            <result column="riskColor" property="color"/>
        </association>
    </resultMap>

    <resultMap id="autoexecOperationInputParamListMap" type="codedriver.framework.autoexec.dto.AutoexecOperationVo">
        <id column="id" property="id"/>
        <collection property="inputParamList" ofType="codedriver.framework.autoexec.dto.AutoexecParamVo">
            <result property="key" column="key"/>
            <result property="name" column="paramName"/>
            <result property="defaultValue" column="defaultValue"/>
            <result property="type" column="paramType"/>
            <result property="mode" column="mode"/>
            <result property="mappingMode" column="mappingMode"/>
            <result property="isRequired" column="isRequired"/>
            <result property="description" column="paramDescription"/>
            <result property="sort" column="sort"/>
            <result property="config" column="config"/>
        </collection>
    </resultMap>

    <resultMap id="autoexecOperationOutputParamListMap" type="codedriver.framework.autoexec.dto.AutoexecOperationVo">
        <id column="id" property="id"/>
        <collection property="outputParamList" ofType="codedriver.framework.autoexec.dto.AutoexecParamVo">
            <result property="key" column="key"/>
            <result property="name" column="paramName"/>
            <result property="defaultValue" column="defaultValue"/>
            <result property="type" column="paramType"/>
            <result property="mode" column="mode"/>
            <result property="mappingMode" column="mappingMode"/>
            <result property="isRequired" column="isRequired"/>
            <result property="description" column="paramDescription"/>
            <result property="sort" column="sort"/>
            <result property="config" column="config"/>
        </collection>
    </resultMap>

    <select id="getScriptListByIdList" parameterType="java.util.List" resultMap="autoexecToolAndScriptMap">
        <include refid="getScriptListByIdList"></include>
    </select>

    <sql id="getScriptListByIdList">
        SELECT
        a.`id`,
        a.`name`,
        'script' AS `type`,
        a.`exec_mode` AS execMode,
        a.`type_id` AS typeId,
        ate.`name` AS typeName,
        a.`risk_id` AS riskId,
        ar.`name` AS riskName,
        ar.`color` AS riskColor,
        a.`description`,
        a.`default_profile_id` AS defaultProfileId,
        c.`key`,
        c.`name` AS paramName,
        c.`default_value` AS defaultValue,
        c.`type` AS paramType,
        c.`mode`,
        c.`mapping_mode` AS mappingMode,
        c.`is_required` AS isRequired,
        c.`description` AS paramDescription,
        c.`sort`,
        c.`config`
        FROM
        `autoexec_script` a
        JOIN `autoexec_script_version` b ON a.`id` = b.`script_id`
        LEFT JOIN `autoexec_script_version_param` c ON b.`id` = c.`script_version_id`
        LEFT JOIN autoexec_type ate ON a.`type_id` = ate.`id`
        LEFT JOIN autoexec_risk ar ON a.`risk_id` = ar.`id`
        WHERE b.`is_active` = 1
        and a.`id` in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </sql>

    <select id="getAutoexecOperationListByIdList" parameterType="java.util.List" resultMap="autoexecOperationMap">
        SELECT
        a.`id`,
        a.`name`,
        'script' AS `type`,
        a.`exec_mode` AS execMode,
        a.`type_id` AS typeId,
        ate.`name` AS typeName,
        a.`risk_id` AS riskId,
        ar.`name` AS riskName,
        ar.`color` AS riskColor,
        a.`description`,
        a.`default_profile_id` AS defaultProfileId
        FROM
        `autoexec_script` a
        JOIN `autoexec_script_version` b ON a.`id` = b.`script_id`
        LEFT JOIN autoexec_type ate ON a.`type_id` = ate.`id`
        LEFT JOIN autoexec_risk ar ON a.`risk_id` = ar.`id`
        WHERE b.`is_active` = 1
        and a.`id` in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="getAutoexecOperationInputParamListByIdList" parameterType="java.util.List"
            resultMap="autoexecOperationInputParamListMap">
        SELECT
        a.`id`,
        c.`key`,
        c.`name` AS paramName,
        c.`default_value` AS defaultValue,
        c.`type` AS paramType,
        c.`mode`,
        c.`mapping_mode` AS mappingMode,
        c.`is_required` AS isRequired,
        c.`description` AS paramDescription,
        c.`sort`,
        c.`config`
        FROM
        `autoexec_script` a
        JOIN `autoexec_script_version` b ON a.`id` = b.`script_id`
        LEFT JOIN `autoexec_script_version_param` c ON b.`id` = c.`script_version_id` and c.mode='input'
        LEFT JOIN autoexec_type ate ON a.`type_id` = ate.`id`
        LEFT JOIN autoexec_risk ar ON a.`risk_id` = ar.`id`
        WHERE b.`is_active` = 1
        and a.`id` in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="getAutoexecOperationOutputParamListByIdList" parameterType="java.util.List"
            resultMap="autoexecOperationOutputParamListMap">
        SELECT
        a.`id`,
        c.`key`,
        c.`name` AS paramName,
        c.`default_value` AS defaultValue,
        c.`type` AS paramType,
        c.`mode`,
        c.`mapping_mode` AS mappingMode,
        c.`is_required` AS isRequired,
        c.`description` AS paramDescription,
        c.`sort`,
        c.`config`
        FROM
        `autoexec_script` a
        JOIN `autoexec_script_version` b ON a.`id` = b.`script_id`
        LEFT JOIN `autoexec_script_version_param` c ON b.`id` = c.`script_version_id`
        AND c.MODE = 'output'
        LEFT JOIN autoexec_type ate ON a.`type_id` = ate.`id`
        LEFT JOIN autoexec_risk ar ON a.`risk_id` = ar.`id`
        WHERE
        b.`is_active` = 1
        and a.`id` in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="getScriptAuditByScriptVersionIdAndOperate"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptAuditVo">
        select `id`,
               `script_id`         as scriptId,
               `script_version_id` as scriptVersionId,
               `operate`,
               `content_hash`      as contentHash,
               `fcu`,
               `fcd`
        from `autoexec_script_audit`
        where `script_version_id` = #{versionId}
          and `operate` = #{operate}
        order by `fcd` desc
        limit 1
    </select>

    <select id="getScriptAuditDetailByHash" parameterType="java.lang.String" resultType="java.lang.String">
        select `content`
        from `autoexec_script_audit_detail`
        where `hash` = #{value}
    </select>

    <select id="getVersionIdListByScriptId" parameterType="java.lang.Long" resultType="java.lang.Long">
        select `id`
        from `autoexec_script_version`
        where `script_id` = #{value}
    </select>

    <select id="checkScriptHasBeenGeneratedToCombop" parameterType="java.lang.Long" resultType="int">
        select count(1)
        from `autoexec_operation_generate_combop`
        where `operation_id` = #{value}
    </select>

    <select id="checkScriptListHasBeenGeneratedToCombop" parameterType="java.util.List"
            resultType="java.lang.Long">
        select
        `operation_id`
        from `autoexec_operation_generate_combop`
        where `operation_id` in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getActiveVersionNumberByScriptId" parameterType="java.lang.Long" resultType="int">
        select `version`
        from `autoexec_script_version`
        where `script_id` = #{value}
          and `is_active` = 1
    </select>

    <select id="getActiveVersionNumberListByScriptIdList" parameterType="java.util.List"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        select
        `script_id` as id,
        `version` as currentVersion
        from `autoexec_script_version`
        where `script_id` in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        and `is_active` = 1
    </select>

    <select id="checkScriptHasSubmittedVersionByScriptId" parameterType="java.lang.Long" resultType="int">
        select count(1)
        from `autoexec_script_version`
        where `script_id` = #{value}
          and `status` = 'submitted'
    </select>

    <select id="getVersionIdList" resultType="java.lang.Long">
        select `id`
        from `autoexec_script_version`
    </select>

    <select id="getScriptVersionListByScriptId"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        select `id`,
               `script_id` as scriptId,
               `version`,
               `encoding`,
               `parser`,
               `status`,
               `reviewer`,
               `is_active` as isActive,
               `lcu`,
               `lcd`
        from `autoexec_script_version`
        where `script_id` = #{vaule}
    </select>

    <select id="getAutoexecCatalogIdByScriptId" resultType="java.lang.Long">
        select `catalog_id`
        from `autoexec_script`
        where `id` = #{value}
    </select>

    <select id="getAutoexecScriptIdListWhichHasActiveVersionByCatalogIdList" parameterType="java.util.List"
            resultType="java.lang.Long">
        select `id`
        from `autoexec_script` a
        where exists (select 1 from `autoexec_script_version` where `script_id` = a.`id` and `is_active` = 1)
        <if test="catalogIdList != null and catalogIdList.size() != 0">
            and `catalog_id` in
            <foreach collection="catalogIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="getArgumentByVersionId" parameterType="java.lang.Long"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptArgumentVo">
        select `script_version_id` as scriptVersionId,
               `name`,
               `default_value`     as defaultValue,
               `argument_count`    as argumentCount,
               `description`,
               `is_required`       as isRequired
        from `autoexec_script_version_argument`
        where `script_version_id` = #{value}
    </select>

    <resultMap id="autoexecOperationArgumentMap" type="codedriver.framework.autoexec.dto.AutoexecOperationVo">
        <result column="id" property="id"/>
        <association property="argument" javaType="codedriver.framework.autoexec.dto.AutoexecParamVo">
            <result property="name" column="argumentName"/>
            <result property="defaultValue" column="argumentDefaultValue"/>
            <result property="argumentCount" column="argumentCount"/>
            <result property="description" column="argumentDescription"/>
            <result property="isRequired" column="argumentIsRequired"/>
        </association>
    </resultMap>

    <select id="getArgumentListByScriptIdList" parameterType="java.util.List" resultMap="autoexecOperationArgumentMap">
        select
        c.`id`,
        a.`name` as argumentName,
        a.`default_value` as argumentDefaultValue,
        a.`argument_count` as argumentCount,
        a.`description` as argumentDescription,
        a.`is_required` as argumentIsRequired
        from `autoexec_script_version_argument` a
        join `autoexec_script_version` b on a.`script_version_id` = b.`id`
        join `autoexec_script` c on b.`script_id` = c.`id`
        where b.`is_active` = 1 and c.`id` in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getScriptByVersionIdList" resultMap="AutoexecScriptMap">
        select asct.id,asct.name,asct.description,asctv.id as versionId
        from autoexec_script asct
        join autoexec_script_version asctv on asct.id = asctv.script_id
        where asctv.id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getVersionParserByScriptIdListAndVersionStatus"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        SELECT
        `script_id` as scriptId,
        `parser`
        FROM
        `autoexec_script_version` a
        JOIN (
        SELECT
        SUBSTRING_INDEX( GROUP_CONCAT( `id` ORDER BY `lcd` DESC ), ',', 1 ) as `id`
        FROM
        `autoexec_script_version`
        WHERE
        `status` = #{versionStatus}
        <choose>
            <when test="versionStatus == 'passed'">
                and `is_active` = 1
            </when>
        </choose>
        and `script_id` in
        <foreach collection="scriptIdList" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        GROUP BY
        `script_id`
        ) b
        on a.`id` = b.`id`

    </select>
    <select id="getAllPasswordScriptParam"
            resultType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionParamVo">
        select `script_version_id` as scriptVersionId,
               `key`,
               `name`,
               `default_value`     as defaultValue,
               `type`,
               `mode`,
               `mapping_mode`      as mappingMode,
               `is_required`       as isRequired,
               `description`,
               `sort`,
               `config`
        from `autoexec_script_version_param`
        where `type` = 'password'
    </select>

    <update id="updateScriptBaseInfo" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        update `autoexec_script`
        set `name`               = #{name},
            `exec_mode`          = #{execMode},
            `type_id`            = #{typeId},
            `catalog_id`         = #{catalogId},
            `risk_id`            = #{riskId},
            `customtemplate_id`  = #{customTemplateId},
            `description`        = #{description},
            `default_profile_id` = #{defaultProfileId}
        where `id` = #{id}
    </update>

    <update id="updateScriptVersion" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        update `autoexec_script_version` set
        <if test="title != null">
            `title` = #{title},
        </if>
        <if test="encoding != null">
            `encoding` = #{encoding},
        </if>
        <if test="parser != null">
            `parser` = #{parser},
        </if>
        <if test="status != null">
            `status` = #{status},
        </if>
        <if test="reviewer != null">
            `reviewer` = #{reviewer},
        </if>
        <if test="version != null">
            `version` = #{version},
        </if>
        <if test="isActive != null">
            `is_active` = #{isActive},
        </if>
        `lcu` = #{lcu},
        `lcd` = now(3)
        where `id` = #{id}
    </update>
    <update id="updateScriptVersionParamPassword">
        update `autoexec_script_version_param`
        set default_value = #{password}
        where script_version_id = #{param.scriptVersionId}
          and `key` = #{param.key}
          and `mode` = #{param.mode}
    </update>

    <insert id="insertScript" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVo">
        insert into `autoexec_script` (`id`,
                                       `name`,
                                       `type_id`,
                                       `catalog_id`,
                                       `risk_id`,
                                       `customtemplate_id`,
                                       `exec_mode`,
                                       `description`,
                                       `default_profile_id`,
                                       `fcu`,
                                       `fcd`)
        values (#{id},
                #{name},
                #{typeId},
                #{catalogId},
                #{riskId},
                #{customTemplateId},
                #{execMode},
                #{description},
                #{defaultProfileId},
                #{fcu},
                now(3))
    </insert>

    <insert id="insertScriptVersion" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptVersionVo">
        insert into `autoexec_script_version` (`id`,
                                               `script_id`,
                                               `title`,
                                               `version`,
                                               `encoding`,
                                               `parser`,
                                               `status`,
                                               `is_active`,
                                               `lcu`,
                                               `lcd`)
        values (#{id},
                #{scriptId},
                #{title},
                #{version},
                #{encoding},
                #{parser},
                #{status},
                #{isActive},
                #{lcu},
                now(3))
    </insert>

    <insert id="insertScriptVersionParamList" parameterType="java.util.List">
        insert into `autoexec_script_version_param` (
        `script_version_id`,
        `key`,
        `name`,
        `default_value`,
        `type`,
        `mode`,
        `mapping_mode`,
        `is_required`,
        `description`,
        `sort`,
        `config`
        ) values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.scriptVersionId},
            #{item.key},
            #{item.name},
            #{item.defaultValueStr},
            #{item.type},
            #{item.mode},
            #{item.mappingMode},
            #{item.isRequired},
            #{item.description},
            #{item.sort},
            #{item.configStr}
            )
        </foreach>
    </insert>

    <insert id="insertScriptLineList" parameterType="java.util.List">
        insert into `autoexec_script_line` (
        `id`,
        `script_id`,
        `script_version_id`,
        `content_hash`,
        `line_number`
        ) values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.id},
            #{item.scriptId},
            #{item.scriptVersionId},
            #{item.contentHash},
            #{item.lineNumber}
            )
        </foreach>
    </insert>

    <insert id="insertScriptLineContent"
            parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptLineContentVo">
        insert ignore into `autoexec_script_line_content` (`hash`,
                                                           `content`)
        values (#{hash},
                #{content})
    </insert>

    <insert id="insertScriptAudit" parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptAuditVo">
        insert into `autoexec_script_audit`(`id`,
                                            `script_id`,
                                            `script_version_id`,
                                            `operate`,
                                            `content_hash`,
                                            `fcu`,
                                            `fcd`)
        values (#{id},
                #{scriptId},
                #{scriptVersionId},
                #{operate},
                #{contentHash},
                #{fcu},
                now(3))
    </insert>

    <insert id="insertScriptAuditDetail"
            parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptAuditContentVo">
        insert ignore into `autoexec_script_audit_detail`(`hash`,
                                                          `content`)
        values (#{hash},
                #{content})
    </insert>

    <insert id="batchInsertScriptVersion" parameterType="java.util.List">
        insert into `autoexec_script_version` (
        `id`,
        `script_id`,
        `version`,
        `encoding`,
        `parser`,
        `status`,
        `is_active`,
        `reviewer`,
        `lcu`,
        `lcd`
        ) values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.id},
            #{item.scriptId},
            #{item.version},
            #{item.encoding},
            #{item.parser},
            #{item.status},
            #{item.isActive},
            #{item.reviewer},
            #{item.lcu},
            #{item.lcd}
            )
        </foreach>
    </insert>

    <insert id="insertScriptVersionArgument"
            parameterType="codedriver.framework.autoexec.dto.script.AutoexecScriptArgumentVo">
        insert into `autoexec_script_version_argument` (`script_version_id`,
                                                        `name`,
                                                        `default_value`,
                                                        `argument_count`,
                                                        `description`,
                                                        `is_required`)
        values (#{scriptVersionId},
                #{name},
                #{defaultValueStr},
                #{argumentCount},
                #{description},
                #{isRequired})
    </insert>

    <insert id="batchInsertVersionArgument">
        insert into `autoexec_script_version_argument` (
        `script_version_id`,
        `name`,
        `default_value`,
        `argument_count`,
        `description`,
        `is_required`
        ) values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.scriptVersionId},
            #{item.name},
            #{item.defaultValueStr},
            #{item.argumentCount},
            #{item.description},
            #{item.isRequired}
            )
        </foreach>
    </insert>

    <delete id="deleteParamByVersionId" parameterType="java.lang.Long">
        delete
        from `autoexec_script_version_param`
        where `script_version_id` = #{value}
    </delete>

    <delete id="deleteScriptLineByVersionId" parameterType="java.lang.Long">
        delete
        from `autoexec_script_line`
        where `script_version_id` = #{value}
    </delete>

    <delete id="deleteScriptLineByScriptId" parameterType="java.lang.Long">
        delete
        from `autoexec_script_line`
        where `script_id` = #{value}
    </delete>

    <delete id="deleteParamByVersionIdList" parameterType="java.util.List">
        delete
        from `autoexec_script_version_param`
        where `script_version_id` in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="deleteScriptVersionByScriptId" parameterType="java.lang.Long">
        delete
        from `autoexec_script_version`
        where `script_id` = #{value}
    </delete>

    <delete id="deleteScriptById" parameterType="java.lang.Long">
        delete
        from `autoexec_script`
        where `id` = #{value}
    </delete>

    <delete id="deleteVersionByVersionId" parameterType="java.lang.Long">
        delete
        from `autoexec_script_version`
        where `id` = #{value}
    </delete>

    <delete id="deleteScriptAuditByScriptId" parameterType="java.lang.Long">
        delete
        from `autoexec_script_audit`
        where `script_id` = #{value}
    </delete>

    <delete id="deleteArgumentByVersionId" parameterType="java.lang.Long">
        delete
        from `autoexec_script_version_argument`
        where `script_version_id` = #{value}
    </delete>

    <delete id="deleteArgumentByVersionIdList" parameterType="java.util.List">
        delete
        from `autoexec_script_version_argument`
        where `script_version_id` in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

</mapper>

